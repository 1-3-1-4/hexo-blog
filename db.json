{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/01-python.md","hash":"a3dd8dc16c5ad81f157052eeae3ba95a17c0d98f","modified":1619682873509},{"_id":"source/_posts/01-数据类型总览.md","hash":"b8233b8c885765dedd8d6311b2e0c9d06025a3a8","modified":1619686119082},{"_id":"source/_posts/02-数据类型-列表详细.md","hash":"61fcfb058aa1fcfd71c135e378f7bc32d7af3541","modified":1619686119070},{"_id":"source/_posts/03-数据类型-字典详细.md","hash":"71fc3dbf92d18aff9783d25b133595750b46379b","modified":1619686119078},{"_id":"source/_posts/04-数据类型-字符串详细.md","hash":"8aabe3847eb1e77d68fbba0260f4311644730d00","modified":1619686119085},{"_id":"source/about/index.md","hash":"2a50cf670ef6aadc20907b208634391c7b00c981","modified":1619664568516},{"_id":"source/categories/index.md","hash":"7aa10b8ce0ec9881c88b5df85e9306fa3f02e86d","modified":1619664568495},{"_id":"source/tags/index.md","hash":"43efe7ea0f90d36c3ee3591711a8af6466590b36","modified":1619664568512},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1619606121390},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1619606121391},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1619606121392},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1619606121412},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1619606121413},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1619606121413},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1619606121416},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1619606121414},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1619606121563},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1619606121419},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1619606121393},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1619606121448},{"_id":"themes/next/_config.yml","hash":"af8d65448b598f5c49ff208f64b68ab755c8b299","modified":1619688629089},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1619606121394},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1619606121400},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1619606121401},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1619606121407},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1619606121408},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1619606121409},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1619606121409},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1619606121410},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1619606121410},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1619606121411},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1619606121423},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1619606121425},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1619606121422},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1619606121426},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1619606121427},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1619606121428},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1619606121430},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1619606121431},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1619606121432},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1619606121449},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1619606121450},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1619606121451},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1619606121451},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1619606121452},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1619606121453},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1619606121454},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1619606121455},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1619606121456},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1619606121457},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1619606121457},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1619606121458},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1619606121459},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1619606121460},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1619606121460},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1619606121461},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1619606121462},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1619606121463},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1619606121467},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1619606121466},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1619606121469},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1619606121468},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1619606121471},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1619606121559},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1619606121559},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1619606121559},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1619606121560},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1619606121561},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1619606121562},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1619606121589},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1619606121396},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1619606121396},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1619606121398},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1619606121399},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1619606121435},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1619606121437},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1619606121438},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1619606121439},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1619606121440},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1619606121442},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1619606121441},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1619606121443},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1619606121444},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1619606121445},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1619606121446},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1619606121447},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1619606121448},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1619606121473},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1619606121476},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1619606121477},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1619606121478},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1619606121479},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1619606121486},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1619606121490},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1619606121514},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1619606121515},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1619606121516},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1619606121518},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1619606121522},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1619606121523},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1619606121530},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1619606121540},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1619606121545},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1619606121564},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1619606121546},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1619606121577},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1619606121578},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1619606121579},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1619606121580},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1619606121581},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1619606121582},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1619606121585},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1619606121587},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1619606121588},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1619606121590},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1619606121591},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1619606121592},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1619606121593},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1619606121594},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1619606121597},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1619606121598},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1619606121599},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1619606121599},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1619606121600},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1619606121601},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1619606121682},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1619606121711},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1619606121714},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1619606121715},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1619606121716},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1619606121717},{"_id":"themes/next/source/images/avatar.jpeg","hash":"e1a02197a27d5d951d3f40543b9c6c2eba014337","modified":1619662062588},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1619606121718},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1619606121719},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1619606121726},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1619606121727},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1619606121730},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1619606121731},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1619606121732},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1619606121733},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1619606121742},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1619606121738},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1619606121742},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1619606121743},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1619606121745},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1619606121745},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1619606121750},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1619606121752},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1619606121480},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1619606121481},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1619606121483},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1619606121483},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1619606121484},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1619606121485},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1619606121488},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1619606121486},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1619606121489},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1619606121491},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1619606121493},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1619606121498},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1619606121501},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1619606121499},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1619606121500},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1619606121509},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1619606121512},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1619606121513},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1619606121519},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1619606121518},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1619606121520},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1619606121521},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1619606121522},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1619606121526},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1619606121527},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1619606121529},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1619606121530},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1619606121531},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1619606121533},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1619606121535},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1619606121536},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1619606121535},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1619606121537},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1619606121538},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1619606121539},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1619606121543},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1619606121543},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1619606121544},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1619606121547},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1619606121548},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1619606121549},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1619606121550},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1619606121551},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1619606121551},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1619606121553},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1619606121556},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1619606121557},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1619606121558},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1619606121565},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1619606121566},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1619606121567},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1619606121569},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1619606121570},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1619606121571},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1619606121572},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1619606121573},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1619606121575},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1619606121576},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1619606121577},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1619606121703},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1619606121707},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1619606121707},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1619606121709},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1619606121710},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1619606121747},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1619606121748},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1619606121603},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1619606121604},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1619606121771},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1619606121773},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1619606121608},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1619606121628},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1619606121642},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1619606121643},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1619606121659},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1619606121660},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1619606121659},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1619606121665},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1619606121677},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1619606121666},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1619606121666},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1619606121667},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1619606121685},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1619606121686},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1619606121688},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1619606121688},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1619606121690},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1619606121694},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1619606121693},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1619606121692},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1619606121695},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1619606121695},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1619606121696},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1619606121697},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1619606121698},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1619606121699},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1619606121700},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1619606121700},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1619606121701},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1619606121702},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1619606121762},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1619606121767},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1619606121609},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1619606121611},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1619606121610},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1619606121612},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1619606121612},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1619606121616},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1619606121617},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1619606121618},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1619606121617},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1619606121619},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1619606121620},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1619606121621},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1619606121622},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1619606121623},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1619606121626},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1619606121627},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1619606121627},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1619606121628},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1619606121629},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1619606121630},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1619606121631},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1619606121631},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1619606121632},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1619606121634},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1619606121634},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1619606121635},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1619606121636},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1619606121638},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1619606121639},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1619606121640},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1619606121641},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1619606121647},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1619606121647},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1619606121649},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1619606121648},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1619606121650},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1619606121653},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1619606121654},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1619606121655},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1619606121656},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1619606121657},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1619606121662},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1619606121663},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1619606121663},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1619606121664},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1619606121667},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1619606121668},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1619606121669},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1619606121670},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1619606121671},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1619606121672},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1619606121673},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1619606121766},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1619606121769},{"_id":"public/atom.xml","hash":"d4ea98cd24063cdc7ddc3958cee522ba22c19bfa","modified":1619685094164},{"_id":"public/about/index.html","hash":"ac4ca27a71a91dae140f9b4284283f4bdd367976","modified":1619685094164},{"_id":"public/categories/index.html","hash":"6eeed26338c27538837b4fa39af50abf7c8c3759","modified":1619685094164},{"_id":"public/tags/index.html","hash":"f05aeacd9587ff984cc8792eae34923fa02b5279","modified":1619685094164},{"_id":"public/tags/Python/index.html","hash":"22af558f3251ac8d4f219db7b234d931f610dbbd","modified":1619685094164},{"_id":"public/archives/index.html","hash":"841f161a9f2418e6c7a1a56abe0a9ce8535cb262","modified":1619685094164},{"_id":"public/archives/2021/index.html","hash":"3ae52a963075c277e0126261684e383c71840353","modified":1619685094164},{"_id":"public/archives/2021/04/index.html","hash":"e5dfd534d5187d44134a6abe27679da9dafa591f","modified":1619685094164},{"_id":"public/categories/Python/index.html","hash":"6ec7b0833527b1cfcbd328eb3d18294696b13106","modified":1619685094164},{"_id":"public/2021/04/29/01-数据类型总览/index.html","hash":"59af37f36708068495a3a038eb82cf0ccd5fc44e","modified":1619685094164},{"_id":"public/2021/04/29/02-数据类型-列表详细/index.html","hash":"22d449ff48b46b05e9302df2fbb69cdeb2b76619","modified":1619685094164},{"_id":"public/2021/04/29/03-数据类型-字典详细/index.html","hash":"d4ce9aefaffb6daf2b51c3879d9ca4c7b7c2a359","modified":1619685094164},{"_id":"public/2021/04/29/04-数据类型-字符串详细/index.html","hash":"95657870b8b888dc3836509a3e0a42e150370e39","modified":1619685094164},{"_id":"public/2021/04/24/01-python/index.html","hash":"3b5d9172e305e282f8753507cb7cbcf38cfc5014","modified":1619684289521},{"_id":"public/index.html","hash":"7b53a751814ba0c784c6789233ae80c49ea18eb4","modified":1619685094164},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1619682920104},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1619682920104},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1619682920104},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1619682920104},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1619682920104},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1619682920104},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1619682920104},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1619682920104},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1619682920104},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1619682920104},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1619682920104},{"_id":"public/images/avatar.jpeg","hash":"e1a02197a27d5d951d3f40543b9c6c2eba014337","modified":1619682920104},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1619682920104},{"_id":"public/css/prism.css","hash":"f1f64f4a26b715edbd65391def53322611df75cf","modified":1619682920104},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1619682920104},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1619682920104},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1619682920104},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1619682920104},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1619682920104},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1619682920104},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1619682920104},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1619682920104},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1619682920104},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1619682920104},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1619682920104},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1619682920104},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1619682920104},{"_id":"public/css/main.css","hash":"da15ade896ada7c488ffca189f61c8b077f26509","modified":1619682920104},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1619682920104},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1619682920104},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1619682920104},{"_id":"source/_posts/python.md","hash":"d2d756ff54a46ce2920c7e6a60171bf7541e4488","modified":1619685978784},{"_id":"public/2021/04/24/python/index.html","hash":"389043919df5a8b82e76d57908b3d9842d14a4da","modified":1619685094164},{"_id":"themes/matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1619750596804},{"_id":"themes/matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1619750596805},{"_id":"themes/matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1619750596804},{"_id":"themes/matery/README.md","hash":"a57adad34e9f6efe25aee84e5043b923201dd456","modified":1619750596805},{"_id":"themes/matery/README_CN.md","hash":"84600a254604b6451b58fe5547edf5a4693616ca","modified":1619750596805},{"_id":"themes/matery/_config.yml","hash":"38fc449157de017b4cbd889a47b71c75edf41e39","modified":1619750596805},{"_id":"themes/matery/languages/default.yml","hash":"75dfe9de9e126abb09e6c4cb78a95bba854e84c7","modified":1619750596806},{"_id":"themes/matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1619750596806},{"_id":"themes/matery/languages/zh-CN.yml","hash":"a957b05f70265a86a87d922e18488571809d2472","modified":1619750596806},{"_id":"themes/matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1619750596816},{"_id":"themes/matery/layout/404.ejs","hash":"9c8ca67377211e5d60fdde272a975faa9a91a22a","modified":1619750596806},{"_id":"themes/matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1619750596813},{"_id":"themes/matery/layout/about.ejs","hash":"99a74316aed478efb0db823c4460ee2e660f101c","modified":1619750596813},{"_id":"themes/matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1619750596813},{"_id":"themes/matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1619750596813},{"_id":"themes/matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1619750596813},{"_id":"themes/matery/layout/layout.ejs","hash":"4bfb9e946a90724fc8a902efe404c7b20549a38c","modified":1619750596814},{"_id":"themes/matery/layout/contact.ejs","hash":"a777733e03d954ac265a3d0523245bd191732130","modified":1619750596813},{"_id":"themes/matery/layout/friends.ejs","hash":"51e5369ec6b017cc702a8d957fc052c59dd4c3d7","modified":1619750596814},{"_id":"themes/matery/layout/post.ejs","hash":"90b5a4c1f70e4756db569c15a7c6cad0c77c4500","modified":1619750596814},{"_id":"themes/matery/layout/index.ejs","hash":"3f2989574b355b9aef42a94fb8a321b1ea24cb1d","modified":1619750596814},{"_id":"themes/matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1619750596814},{"_id":"themes/matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1619750596814},{"_id":"themes/matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1619750596816},{"_id":"themes/matery/source/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1619750596816},{"_id":"themes/matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1619750596815},{"_id":"themes/matery/source/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1619750596816},{"_id":"themes/matery/source/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1619750596814},{"_id":"themes/matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1619750596815},{"_id":"themes/matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1619750596815},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1619750596815},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1619750596806},{"_id":"themes/matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1619750596807},{"_id":"themes/matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1619750596806},{"_id":"themes/matery/layout/_partial/background.ejs","hash":"aef6edeeb11209831a11d8c7f5d59992e2573335","modified":1619750596806},{"_id":"themes/matery/layout/_partial/bg-cover-content.ejs","hash":"c35e4254ff0738878f65251a657b4fdcafc4b270","modified":1619750596807},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1619750596807},{"_id":"themes/matery/source/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1619750596815},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"3be24e4c370671eda53bdfd99fb748f4a22948ba","modified":1619750596807},{"_id":"themes/matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1619750596807},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1619750596807},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1619750596807},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1619750596807},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"f8438ac80df005934a330b029de292d26f0b6ecb","modified":1619750596808},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1619750596808},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1619750596808},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1619750596808},{"_id":"themes/matery/layout/_partial/index-cover.ejs","hash":"85f0ef1c390694a1661e77f44a3ed76555099385","modified":1619750596808},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"cb0cb452be1cd1857ba600f04025b506f3b6fc79","modified":1619750596808},{"_id":"themes/matery/layout/_partial/minivaline.ejs","hash":"738b83cd90fe1b26971d803fc89c56193323da1e","modified":1619750596808},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1619750596808},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1619750596809},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1619750596809},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"3ff94aff01936242a9f4e1f31adb9b43bfab8d53","modified":1619750596809},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"78b70ff24b3039c871331ebec114b936c1756cc8","modified":1619750596809},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1619750596809},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1619750596809},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"7933979c2092654a9c1038ff30495505d7d88f2d","modified":1619750596809},{"_id":"themes/matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1619750596810},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1619750596810},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1619750596810},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1619750596810},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1619750596810},{"_id":"themes/matery/layout/_partial/twikoo.ejs","hash":"f9cb8c82b9d2a7cdb644e10718f1cdeb9400414c","modified":1619750596810},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"045f3aaade1dc6749a1f824b0405b5fdb9e041e4","modified":1619750596810},{"_id":"themes/matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1619750596882},{"_id":"themes/matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1619750596976},{"_id":"themes/matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1619750596903},{"_id":"themes/matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1619750596811},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"e9e3e327d5de9d7aeadbde32e1d558652d9e9195","modified":1619750596811},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1619750596811},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1619750596811},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1619750596811},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1619750596811},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1619750596811},{"_id":"themes/matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1619750596976},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1619750596812},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1619750596812},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1619750596812},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1619750596812},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1619750596812},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1619750596812},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"5e5ec78f8ab229d54786ef2e0ea2864af2dc459f","modified":1619750596812},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1619750596817},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1619750596817},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1619750596816},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1619750596817},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1619750596851},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1619750596851},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1619750596817},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1619750596851},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1619750596851},{"_id":"themes/matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1619750596851},{"_id":"themes/matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1619750596850},{"_id":"themes/matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1619750596851},{"_id":"themes/matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1619750596851},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1619750596852},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1619750596852},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1619750596861},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1619750596863},{"_id":"themes/matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1619750596864},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1619750596865},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1619750596864},{"_id":"themes/matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1619750596871},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1619750596872},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1619750596871},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1619750596872},{"_id":"themes/matery/source/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1619750596872},{"_id":"themes/matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1619750596878},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1619750596874},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1619750596875},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1619750596868},{"_id":"themes/matery/source/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1619750596901},{"_id":"themes/matery/source/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1619750596902},{"_id":"themes/matery/source/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1619750596902},{"_id":"themes/matery/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1619750596902},{"_id":"themes/matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1619750596977},{"_id":"themes/matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1619750596976},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1619750596956},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1619750596944},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1619750596960},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1619750596960},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1619750596967},{"_id":"themes/matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1619750596969},{"_id":"themes/matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1619750596970},{"_id":"themes/matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1619750596969},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1619750596972},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1619750596974},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1619750596973},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1619750596975},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1619750596833},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1619750596833},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1619750596831},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1619750596833},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1619750596866},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1619750596867},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1619750596867},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1619750596867},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1619750596866},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1619750596866},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1619750596867},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1619750596867},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1619750596868},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1619750596874},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1619750596867},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1619750596874},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1619750596872},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1619750596872},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1619750596873},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1619750596873},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1619750596873},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1619750596853},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1619750596864},{"_id":"themes/matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1619750596865},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1619750596879},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1619750596883},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1619750596893},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1619750596888},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1619750596931},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1619750596943},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1619750596953},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1619750596954},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1619750596958},{"_id":"themes/matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1619750596965},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1619750596963},{"_id":"themes/matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1619750596964},{"_id":"themes/matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1619750596968},{"_id":"themes/matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1619750596972},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1619750596975},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1619750596974},{"_id":"themes/matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1619750596818},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1619750596820},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1619750596829},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1619750596830},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1619750596830},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1619750596850},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1619750596850},{"_id":"themes/matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1619750596924},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1619750596862},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1619750596871},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1619750596869},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1619750596881},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1619750596885},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1619750596900},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1619750596901},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1619750596832},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1619750596849},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1619750596835},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1619750596898},{"_id":"themes/matery/source/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1619750596878},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1619750596859},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1619750596842},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1619750596826},{"_id":"source/_posts/python/02-数据类型-列表详细.md","hash":"61fcfb058aa1fcfd71c135e378f7bc32d7af3541","modified":1619686119070},{"_id":"source/_posts/python/03-数据类型-字典详细.md","hash":"71fc3dbf92d18aff9783d25b133595750b46379b","modified":1619686119078},{"_id":"source/_posts/python/01-数据类型总览.md","hash":"b8233b8c885765dedd8d6311b2e0c9d06025a3a8","modified":1619686119082},{"_id":"source/_posts/python/04-数据类型-字符串详细.md","hash":"8aabe3847eb1e77d68fbba0260f4311644730d00","modified":1619686119085},{"_id":"source/_posts/python/python.md","hash":"d2d756ff54a46ce2920c7e6a60171bf7541e4488","modified":1619685978784}],"Category":[{"name":"Python","_id":"cko2jm0dz0004t009dp4h4sdm"}],"Data":[],"Page":[{"title":"关于","date":"2021-04-29T01:46:34.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2021-04-29 09:46:34\ntype: about\n---\n","updated":"2021-04-29T02:49:28.516Z","path":"about/index.html","comments":1,"layout":"page","_id":"cko2jm0cu0000t0093g5z656r","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2021-04-29T01:46:25.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-04-29 09:46:25\ntype: categories\n---\n","updated":"2021-04-29T02:49:28.495Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cko2jm0dq0002t0092uom24s8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2021-04-29T01:42:56.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-04-29 09:42:56\ntype: tags\n---\n","updated":"2021-04-29T02:49:28.512Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cko2jm0eq0006t0092y8xcda3","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Python--数据类型总览","date":"2021-04-29T02:51:22.000Z","description":"数据类型总览","_content":"### 整型(int)\n\n```python\nintEx = 1024\n```\n\n### 浮点型(float)\n\n`floatEx = 2.345`\n\n### 字符型(string)\n\n#### 1、格式\n\n1、使用单引号标识字符串\n\n`stringEx = 'my code'`\n\n2、使用双引号标识字符串\n\n`stringEx = \"my code\"`\n\n> 在双引号中可以使用单引号`stringEx = \"'my','code'\"`\n\n3、使用三单引号或三双引号来表示多行的字符串，可以在三引号中使用单引号和双引号\n\n<!-- more -->\n\n```python\nstringEx = '''\nmy code\noh, this is 'cat'\nyes, l like \"it\"\n'''\nprint(stringEx)\n\"\"\"\nmy code\noh, this is 'cat'\nyes, l like \"it\"\n\"\"\"\n```\n\n> 同时三单引号和三双引号在Python也表示多行注释\n\n#### 2、一些字符串的操作\n\n1、获取字符串`abcdefgh`中的`bc`\n\n```python\nstringEx = 'abcdefgh'\nprint(stringEx[1:3])\n# bc\n```\n\n2、循环输出字符串的每个字符\n\n```python\nstringEx = 'abcdefgh'\nfor s in stringEx:\n  print(s)\n```\n\n\n\n### 布尔型(bool)\n\n`boolEx = True`\n\n`boolEx = False`\n\n### 列表(list)\n\n#### 1、格式\n\n`变量名 = [值1, 值2, 值3]`\n\n#### 2、初始化\n\n```python\n# 初始化一个空列表\nlistEx = []\n\n# 初始化一个都为整型的列表\nlistEx = [1, 2, ,3, 4, 5]\n\n# 初始化连续的数字 [5, 6, 7, 8, 9]\nlistEx = [n for n in range(5, 10)]\n\n# 初始化n个相同值的列表 [1, 1, 1, 1, 1]\nlistEx = [1 for n in range(5)] #第一种\nlistEx = [1] * 5 #第二种\n```\n\n#### 3、列表的操作\n\n`listEx = [1, 2, 3]`\n\n#### 1、列表中增加值\n\n```python\n#插入指定值的后面,如果列表中有多个指定的值，则会插入在一个指定值的后面\nlistEx.insert(2, 'bob')\n\n#追加在列表的最后面 [1, 2, 3, 'bob']\nlistEx.append('bob')\n\n#追加多个值 [1, 2, 3, 'joe', 'hode']\nlistEx.extend(['joe', 'hode'])\n\n```\n\n> 一些意外的写法\n>\n> `listEx.append(['bob', 'joe'])`得到的是`[1, 2, 3, ['bob', 'joe']]`\n>\n> `listEx.extend('bob')`得到的是`[1, 2, 3, 'b', 'o', 'b']`\n\n#### 2、列表中删除值\n\n```python\n#删除指定的值\nlistEx.remove(2) #删除的列表中第一个值为2的\n\n#删除从1到2位置的值\ndel listEx[1:2]\n```\n\n### 元组(tuple)\n\n#### 1、格式\n\n`变量 = (值1, 值2, 值3)`\n\n> 元组与列表类似，不同之处在于元组的元素不能修改\n\n#### 2、使用\n\n```python\ntupleEx = ( 'abcd', 786 , 2.23, 'runoob', 70.2  )\ntinytuple = (123, 'runoob')\n\nprint (tupleEx)             # 输出完整元组\nprint (tupleEx[0])          # 输出元组的第一个元素\nprint (tupleEx[1:3])        # 输出从第二个元素开始到第三个元素\nprint (tupleEx[2:])         # 输出从第三个元素开始的所有元素\nprint (tinytuple * 2)     # 输出两次元组\nprint (tupleEx + tinytuple) # 连接元组\n```\n\n> string、list 和 tuple 都属于 sequence（序列）。\n>\n> **注意：**\n>\n> - 1、与字符串一样，元组的元素不能修改。\n> - 2、元组也可以被索引和切片，方法一样。\n> - 3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。\n> - 4、元组也可以使用+操作符进行拼接。\n\n**特殊的使用**\n\n```python\n# 虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。\nlistEx = [1, 2, 3]\nletter = ([1, 2, 3], 'a')\nletter[0][2] = 5\nprint(letter)\n```\n\n### 集合(set)\n\n#### 1、格式\n\n集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。\n\n基本功能是进行成员关系测试和删除重复元素。\n\n可以使用大括号 **{ }** 或者 **set()** 函数创建集合\n\n> **注意：**创建一个空集合必须用 **set()** 而不是 **{ }**，因为 **{ }** 是用来创建一个空字典。\n\n#### 2、使用\n\n```python\n# 在if中的使用\nsites = {'Google', 'Taobao', 'Runoob', 'Facebook', 'Zhihu', 'Baidu', 'Taobao'}\nprint(sites)\n# {'Google', 'Taobao', 'Runoob', 'Facebook', 'Zhihu', 'Baidu'}\n```\n\n> **重复的元素会被自动过滤掉，而且输出的集合中的顺序是随机的**\n\n#### 3、集合的运算\n\n```python\n# set可以进行集合运算\na = set('abracadabra')\nb = set('alacazam')\n\nprint(a)\n\nprint(a - b)     # a 和 b 的差集  在a中有的且在b中没有的\n# {'d', 'b', 'r'}\nprint(b - a)\t\t # b 和 a 的差集  在b中有的且在a中没有的\n# {'l', 'm', 'z'}\n\nprint(a | b)     # a 和 b 的并集\n# {'d', 'z', 'b', 'a', 'r', 'm', 'c', 'l'}\n\nprint(a & b)     # a 和 b 的交集\n#{'a', 'c'}\n\nprint(a ^ b)\t\t # a 和 b 中不同时存在的元素\n# {'d', 'z', 'b', 'l', 'r', 'm'}\n```\n\n### 字典(dictionary)\n\n#### 1、格式\n\n列表是有序的对象集合，字典是无序的对象集合。\n\n> 列表和字典的区别：字典中的元素是通过键来存取，而不是通过偏移存取\n\n字典是一种映射类型，字典用`{}`标识，它是一个无序的`键(key): 值(value)`的集合\n\n在同一个字典中，键(key)必须是惟一的\n\n```python\ndictEx = {\n  'a': 1,\n  'b': 2\nEx\ndictEx[1] = 'abc'\n\nprint(dictEx)\n# {'a': 1, 'b': 2, 1: 'abc'}\n\nprint(list(dictEx.keys()) # 输出所有的键\n# ['a', 'b', 1]\nprint(list(dictEx.values()) # 输出所有的值\n# [1, 2, 'abc']\n```\n\n#### 2、一些构建字典的写法\n\n```python\nlistEx = [('python', 1), ('php', 2), ('golang', 3)]\nprint(dict(listEx))\n# {'python': 1, 'php': 2, 'golang': 3}\n\ndictEx = {x: x**2 for x in (2, 4, 6)}\nprint(dictEx)\n# {2: 4, 4: 16, 6: 36}\n\ndictEx = dict(python=1, php=2, golang=3)\nprint(dictEx)\n# {'python': 1, 'php': 2, 'golang': 3}\n```\n\n> `x**2`中`**`表示幂，`2**3`表示2的3次方\n","source":"_posts/python/01-数据类型总览.md","raw":"---\ntitle: Python--数据类型总览\ndate: 2021-04-29 10:51:22\ntags: Python\ncategories: Python\ndescription: 数据类型总览\n---\n### 整型(int)\n\n```python\nintEx = 1024\n```\n\n### 浮点型(float)\n\n`floatEx = 2.345`\n\n### 字符型(string)\n\n#### 1、格式\n\n1、使用单引号标识字符串\n\n`stringEx = 'my code'`\n\n2、使用双引号标识字符串\n\n`stringEx = \"my code\"`\n\n> 在双引号中可以使用单引号`stringEx = \"'my','code'\"`\n\n3、使用三单引号或三双引号来表示多行的字符串，可以在三引号中使用单引号和双引号\n\n<!-- more -->\n\n```python\nstringEx = '''\nmy code\noh, this is 'cat'\nyes, l like \"it\"\n'''\nprint(stringEx)\n\"\"\"\nmy code\noh, this is 'cat'\nyes, l like \"it\"\n\"\"\"\n```\n\n> 同时三单引号和三双引号在Python也表示多行注释\n\n#### 2、一些字符串的操作\n\n1、获取字符串`abcdefgh`中的`bc`\n\n```python\nstringEx = 'abcdefgh'\nprint(stringEx[1:3])\n# bc\n```\n\n2、循环输出字符串的每个字符\n\n```python\nstringEx = 'abcdefgh'\nfor s in stringEx:\n  print(s)\n```\n\n\n\n### 布尔型(bool)\n\n`boolEx = True`\n\n`boolEx = False`\n\n### 列表(list)\n\n#### 1、格式\n\n`变量名 = [值1, 值2, 值3]`\n\n#### 2、初始化\n\n```python\n# 初始化一个空列表\nlistEx = []\n\n# 初始化一个都为整型的列表\nlistEx = [1, 2, ,3, 4, 5]\n\n# 初始化连续的数字 [5, 6, 7, 8, 9]\nlistEx = [n for n in range(5, 10)]\n\n# 初始化n个相同值的列表 [1, 1, 1, 1, 1]\nlistEx = [1 for n in range(5)] #第一种\nlistEx = [1] * 5 #第二种\n```\n\n#### 3、列表的操作\n\n`listEx = [1, 2, 3]`\n\n#### 1、列表中增加值\n\n```python\n#插入指定值的后面,如果列表中有多个指定的值，则会插入在一个指定值的后面\nlistEx.insert(2, 'bob')\n\n#追加在列表的最后面 [1, 2, 3, 'bob']\nlistEx.append('bob')\n\n#追加多个值 [1, 2, 3, 'joe', 'hode']\nlistEx.extend(['joe', 'hode'])\n\n```\n\n> 一些意外的写法\n>\n> `listEx.append(['bob', 'joe'])`得到的是`[1, 2, 3, ['bob', 'joe']]`\n>\n> `listEx.extend('bob')`得到的是`[1, 2, 3, 'b', 'o', 'b']`\n\n#### 2、列表中删除值\n\n```python\n#删除指定的值\nlistEx.remove(2) #删除的列表中第一个值为2的\n\n#删除从1到2位置的值\ndel listEx[1:2]\n```\n\n### 元组(tuple)\n\n#### 1、格式\n\n`变量 = (值1, 值2, 值3)`\n\n> 元组与列表类似，不同之处在于元组的元素不能修改\n\n#### 2、使用\n\n```python\ntupleEx = ( 'abcd', 786 , 2.23, 'runoob', 70.2  )\ntinytuple = (123, 'runoob')\n\nprint (tupleEx)             # 输出完整元组\nprint (tupleEx[0])          # 输出元组的第一个元素\nprint (tupleEx[1:3])        # 输出从第二个元素开始到第三个元素\nprint (tupleEx[2:])         # 输出从第三个元素开始的所有元素\nprint (tinytuple * 2)     # 输出两次元组\nprint (tupleEx + tinytuple) # 连接元组\n```\n\n> string、list 和 tuple 都属于 sequence（序列）。\n>\n> **注意：**\n>\n> - 1、与字符串一样，元组的元素不能修改。\n> - 2、元组也可以被索引和切片，方法一样。\n> - 3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。\n> - 4、元组也可以使用+操作符进行拼接。\n\n**特殊的使用**\n\n```python\n# 虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。\nlistEx = [1, 2, 3]\nletter = ([1, 2, 3], 'a')\nletter[0][2] = 5\nprint(letter)\n```\n\n### 集合(set)\n\n#### 1、格式\n\n集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。\n\n基本功能是进行成员关系测试和删除重复元素。\n\n可以使用大括号 **{ }** 或者 **set()** 函数创建集合\n\n> **注意：**创建一个空集合必须用 **set()** 而不是 **{ }**，因为 **{ }** 是用来创建一个空字典。\n\n#### 2、使用\n\n```python\n# 在if中的使用\nsites = {'Google', 'Taobao', 'Runoob', 'Facebook', 'Zhihu', 'Baidu', 'Taobao'}\nprint(sites)\n# {'Google', 'Taobao', 'Runoob', 'Facebook', 'Zhihu', 'Baidu'}\n```\n\n> **重复的元素会被自动过滤掉，而且输出的集合中的顺序是随机的**\n\n#### 3、集合的运算\n\n```python\n# set可以进行集合运算\na = set('abracadabra')\nb = set('alacazam')\n\nprint(a)\n\nprint(a - b)     # a 和 b 的差集  在a中有的且在b中没有的\n# {'d', 'b', 'r'}\nprint(b - a)\t\t # b 和 a 的差集  在b中有的且在a中没有的\n# {'l', 'm', 'z'}\n\nprint(a | b)     # a 和 b 的并集\n# {'d', 'z', 'b', 'a', 'r', 'm', 'c', 'l'}\n\nprint(a & b)     # a 和 b 的交集\n#{'a', 'c'}\n\nprint(a ^ b)\t\t # a 和 b 中不同时存在的元素\n# {'d', 'z', 'b', 'l', 'r', 'm'}\n```\n\n### 字典(dictionary)\n\n#### 1、格式\n\n列表是有序的对象集合，字典是无序的对象集合。\n\n> 列表和字典的区别：字典中的元素是通过键来存取，而不是通过偏移存取\n\n字典是一种映射类型，字典用`{}`标识，它是一个无序的`键(key): 值(value)`的集合\n\n在同一个字典中，键(key)必须是惟一的\n\n```python\ndictEx = {\n  'a': 1,\n  'b': 2\nEx\ndictEx[1] = 'abc'\n\nprint(dictEx)\n# {'a': 1, 'b': 2, 1: 'abc'}\n\nprint(list(dictEx.keys()) # 输出所有的键\n# ['a', 'b', 1]\nprint(list(dictEx.values()) # 输出所有的值\n# [1, 2, 'abc']\n```\n\n#### 2、一些构建字典的写法\n\n```python\nlistEx = [('python', 1), ('php', 2), ('golang', 3)]\nprint(dict(listEx))\n# {'python': 1, 'php': 2, 'golang': 3}\n\ndictEx = {x: x**2 for x in (2, 4, 6)}\nprint(dictEx)\n# {2: 4, 4: 16, 6: 36}\n\ndictEx = dict(python=1, php=2, golang=3)\nprint(dictEx)\n# {'python': 1, 'php': 2, 'golang': 3}\n```\n\n> `x**2`中`**`表示幂，`2**3`表示2的3次方\n","slug":"python/01-数据类型总览","published":1,"updated":"2021-04-29T08:48:39.082Z","_id":"cko3q9ije00008u094lwf16ax","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"整型-int\"><a href=\"#整型-int\" class=\"headerlink\" title=\"整型(int)\"></a>整型(int)</h3><pre class=\" language-python\"><code class=\"language-python\">intEx <span class=\"token operator\">=</span> <span class=\"token number\">1024</span>\n</code></pre>\n<h3 id=\"浮点型-float\"><a href=\"#浮点型-float\" class=\"headerlink\" title=\"浮点型(float)\"></a>浮点型(float)</h3><p><code>floatEx = 2.345</code></p>\n<h3 id=\"字符型-string\"><a href=\"#字符型-string\" class=\"headerlink\" title=\"字符型(string)\"></a>字符型(string)</h3><h4 id=\"1、格式\"><a href=\"#1、格式\" class=\"headerlink\" title=\"1、格式\"></a>1、格式</h4><p>1、使用单引号标识字符串</p>\n<p><code>stringEx = &#39;my code&#39;</code></p>\n<p>2、使用双引号标识字符串</p>\n<p><code>stringEx = &quot;my code&quot;</code></p>\n<blockquote>\n<p>在双引号中可以使用单引号<code>stringEx = &quot;&#39;my&#39;,&#39;code&#39;&quot;</code></p>\n</blockquote>\n<p>3、使用三单引号或三双引号来表示多行的字符串，可以在三引号中使用单引号和双引号</p>\n<span id=\"more\"></span>\n\n<pre class=\" language-python\"><code class=\"language-python\">stringEx <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">'''\nmy code\noh, this is 'cat'\nyes, l like \"it\"\n'''</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stringEx<span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">\"\"\"\nmy code\noh, this is 'cat'\nyes, l like \"it\"\n\"\"\"</span>\n</code></pre>\n<blockquote>\n<p>同时三单引号和三双引号在Python也表示多行注释</p>\n</blockquote>\n<h4 id=\"2、一些字符串的操作\"><a href=\"#2、一些字符串的操作\" class=\"headerlink\" title=\"2、一些字符串的操作\"></a>2、一些字符串的操作</h4><p>1、获取字符串<code>abcdefgh</code>中的<code>bc</code></p>\n<pre class=\" language-python\"><code class=\"language-python\">stringEx <span class=\"token operator\">=</span> <span class=\"token string\">'abcdefgh'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stringEx<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># bc</span>\n</code></pre>\n<p>2、循环输出字符串的每个字符</p>\n<pre class=\" language-python\"><code class=\"language-python\">stringEx <span class=\"token operator\">=</span> <span class=\"token string\">'abcdefgh'</span>\n<span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> stringEx<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"布尔型-bool\"><a href=\"#布尔型-bool\" class=\"headerlink\" title=\"布尔型(bool)\"></a>布尔型(bool)</h3><p><code>boolEx = True</code></p>\n<p><code>boolEx = False</code></p>\n<h3 id=\"列表-list\"><a href=\"#列表-list\" class=\"headerlink\" title=\"列表(list)\"></a>列表(list)</h3><h4 id=\"1、格式-1\"><a href=\"#1、格式-1\" class=\"headerlink\" title=\"1、格式\"></a>1、格式</h4><p><code>变量名 = [值1, 值2, 值3]</code></p>\n<h4 id=\"2、初始化\"><a href=\"#2、初始化\" class=\"headerlink\" title=\"2、初始化\"></a>2、初始化</h4><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 初始化一个空列表</span>\nlistEx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 初始化一个都为整型的列表</span>\nlistEx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 初始化连续的数字 [5, 6, 7, 8, 9]</span>\nlistEx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>n <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 初始化n个相同值的列表 [1, 1, 1, 1, 1]</span>\nlistEx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span> <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\" spellcheck=\"true\">#第一种</span>\nlistEx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span> <span class=\"token comment\" spellcheck=\"true\">#第二种</span>\n</code></pre>\n<h4 id=\"3、列表的操作\"><a href=\"#3、列表的操作\" class=\"headerlink\" title=\"3、列表的操作\"></a>3、列表的操作</h4><p><code>listEx = [1, 2, 3]</code></p>\n<h4 id=\"1、列表中增加值\"><a href=\"#1、列表中增加值\" class=\"headerlink\" title=\"1、列表中增加值\"></a>1、列表中增加值</h4><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#插入指定值的后面,如果列表中有多个指定的值，则会插入在一个指定值的后面</span>\nlistEx<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bob'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">#追加在列表的最后面 [1, 2, 3, 'bob']</span>\nlistEx<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'bob'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">#追加多个值 [1, 2, 3, 'joe', 'hode']</span>\nlistEx<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'joe'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hode'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<p>一些意外的写法</p>\n<p><code>listEx.append([&#39;bob&#39;, &#39;joe&#39;])</code>得到的是<code>[1, 2, 3, [&#39;bob&#39;, &#39;joe&#39;]]</code></p>\n<p><code>listEx.extend(&#39;bob&#39;)</code>得到的是<code>[1, 2, 3, &#39;b&#39;, &#39;o&#39;, &#39;b&#39;]</code></p>\n</blockquote>\n<h4 id=\"2、列表中删除值\"><a href=\"#2、列表中删除值\" class=\"headerlink\" title=\"2、列表中删除值\"></a>2、列表中删除值</h4><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#删除指定的值</span>\nlistEx<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#删除的列表中第一个值为2的</span>\n\n<span class=\"token comment\" spellcheck=\"true\">#删除从1到2位置的值</span>\n<span class=\"token keyword\">del</span> listEx<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<h3 id=\"元组-tuple\"><a href=\"#元组-tuple\" class=\"headerlink\" title=\"元组(tuple)\"></a>元组(tuple)</h3><h4 id=\"1、格式-2\"><a href=\"#1、格式-2\" class=\"headerlink\" title=\"1、格式\"></a>1、格式</h4><p><code>变量 = (值1, 值2, 值3)</code></p>\n<blockquote>\n<p>元组与列表类似，不同之处在于元组的元素不能修改</p>\n</blockquote>\n<h4 id=\"2、使用\"><a href=\"#2、使用\" class=\"headerlink\" title=\"2、使用\"></a>2、使用</h4><pre class=\" language-python\"><code class=\"language-python\">tupleEx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'abcd'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">786</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">2.23</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'runoob'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70.2</span>  <span class=\"token punctuation\">)</span>\ntinytuple <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'runoob'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>tupleEx<span class=\"token punctuation\">)</span>             <span class=\"token comment\" spellcheck=\"true\"># 输出完整元组</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>tupleEx<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>          <span class=\"token comment\" spellcheck=\"true\"># 输出元组的第一个元素</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>tupleEx<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\" spellcheck=\"true\"># 输出从第二个元素开始到第三个元素</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>tupleEx<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\" spellcheck=\"true\"># 输出从第三个元素开始的所有元素</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>tinytuple <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\" spellcheck=\"true\"># 输出两次元组</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>tupleEx <span class=\"token operator\">+</span> tinytuple<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 连接元组</span>\n</code></pre>\n<blockquote>\n<p>string、list 和 tuple 都属于 sequence（序列）。</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>1、与字符串一样，元组的元素不能修改。</li>\n<li>2、元组也可以被索引和切片，方法一样。</li>\n<li>3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。</li>\n<li>4、元组也可以使用+操作符进行拼接。</li>\n</ul>\n</blockquote>\n<p><strong>特殊的使用</strong></p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</span>\nlistEx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nletter <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\nletter<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"集合-set\"><a href=\"#集合-set\" class=\"headerlink\" title=\"集合(set)\"></a>集合(set)</h3><h4 id=\"1、格式-3\"><a href=\"#1、格式-3\" class=\"headerlink\" title=\"1、格式\"></a>1、格式</h4><p>集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。</p>\n<p>基本功能是进行成员关系测试和删除重复元素。</p>\n<p>可以使用大括号 <strong>{ }</strong> 或者 <strong>set()</strong> 函数创建集合</p>\n<blockquote>\n<p><strong>注意：</strong>创建一个空集合必须用 <strong>set()</strong> 而不是 **{ }**，因为 <strong>{ }</strong> 是用来创建一个空字典。</p>\n</blockquote>\n<h4 id=\"2、使用-1\"><a href=\"#2、使用-1\" class=\"headerlink\" title=\"2、使用\"></a>2、使用</h4><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 在if中的使用</span>\nsites <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;'Google', 'Taobao', 'Runoob', 'Facebook', 'Zhihu', 'Baidu', 'Taobao'&amp;#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sites<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># &amp;#123;'Google', 'Taobao', 'Runoob', 'Facebook', 'Zhihu', 'Baidu'&amp;#125;</span>\n</code></pre>\n<blockquote>\n<p><strong>重复的元素会被自动过滤掉，而且输出的集合中的顺序是随机的</strong></p>\n</blockquote>\n<h4 id=\"3、集合的运算\"><a href=\"#3、集合的运算\" class=\"headerlink\" title=\"3、集合的运算\"></a>3、集合的运算</h4><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># set可以进行集合运算</span>\na <span class=\"token operator\">=</span> set<span class=\"token punctuation\">(</span><span class=\"token string\">'abracadabra'</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> set<span class=\"token punctuation\">(</span><span class=\"token string\">'alacazam'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span>     <span class=\"token comment\" spellcheck=\"true\"># a 和 b 的差集  在a中有的且在b中没有的</span>\n<span class=\"token comment\" spellcheck=\"true\"># &amp;#123;'d', 'b', 'r'&amp;#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">-</span> a<span class=\"token punctuation\">)</span>         <span class=\"token comment\" spellcheck=\"true\"># b 和 a 的差集  在b中有的且在a中没有的</span>\n<span class=\"token comment\" spellcheck=\"true\"># &amp;#123;'l', 'm', 'z'&amp;#125;</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">|</span> b<span class=\"token punctuation\">)</span>     <span class=\"token comment\" spellcheck=\"true\"># a 和 b 的并集</span>\n<span class=\"token comment\" spellcheck=\"true\"># &amp;#123;'d', 'z', 'b', 'a', 'r', 'm', 'c', 'l'&amp;#125;</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span>     <span class=\"token comment\" spellcheck=\"true\"># a 和 b 的交集</span>\n<span class=\"token comment\" spellcheck=\"true\">#&amp;#123;'a', 'c'&amp;#125;</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">^</span> b<span class=\"token punctuation\">)</span>         <span class=\"token comment\" spellcheck=\"true\"># a 和 b 中不同时存在的元素</span>\n<span class=\"token comment\" spellcheck=\"true\"># &amp;#123;'d', 'z', 'b', 'l', 'r', 'm'&amp;#125;</span>\n</code></pre>\n<h3 id=\"字典-dictionary\"><a href=\"#字典-dictionary\" class=\"headerlink\" title=\"字典(dictionary)\"></a>字典(dictionary)</h3><h4 id=\"1、格式-4\"><a href=\"#1、格式-4\" class=\"headerlink\" title=\"1、格式\"></a>1、格式</h4><p>列表是有序的对象集合，字典是无序的对象集合。</p>\n<blockquote>\n<p>列表和字典的区别：字典中的元素是通过键来存取，而不是通过偏移存取</p>\n</blockquote>\n<p>字典是一种映射类型，字典用<code>&#123;&#125;</code>标识，它是一个无序的<code>键(key): 值(value)</code>的集合</p>\n<p>在同一个字典中，键(key)必须是惟一的</p>\n<pre class=\" language-python\"><code class=\"language-python\">dictEx <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;</span>\n  <span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\nEx\ndictEx<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dictEx<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># &amp;#123;'a': 1, 'b': 2, 1: 'abc'&amp;#125;</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">(</span>dictEx<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 输出所有的键</span>\n<span class=\"token comment\" spellcheck=\"true\"># ['a', 'b', 1]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">(</span>dictEx<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 输出所有的值</span>\n<span class=\"token comment\" spellcheck=\"true\"># [1, 2, 'abc']</span>\n</code></pre>\n<h4 id=\"2、一些构建字典的写法\"><a href=\"#2、一些构建字典的写法\" class=\"headerlink\" title=\"2、一些构建字典的写法\"></a>2、一些构建字典的写法</h4><pre class=\" language-python\"><code class=\"language-python\">listEx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'python'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'php'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'golang'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dict<span class=\"token punctuation\">(</span>listEx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># &amp;#123;'python': 1, 'php': 2, 'golang': 3&amp;#125;</span>\n\ndictEx <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;x: x**2 for x in (2, 4, 6)&amp;#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dictEx<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># &amp;#123;2: 4, 4: 16, 6: 36&amp;#125;</span>\n\ndictEx <span class=\"token operator\">=</span> dict<span class=\"token punctuation\">(</span>python<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> php<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> golang<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dictEx<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># &amp;#123;'python': 1, 'php': 2, 'golang': 3&amp;#125;</span>\n</code></pre>\n<blockquote>\n<p><code>x**2</code>中<code>**</code>表示幂，<code>2**3</code>表示2的3次方</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"整型-int\"><a href=\"#整型-int\" class=\"headerlink\" title=\"整型(int)\"></a>整型(int)</h3><pre><code class=\"python\">intEx = 1024\n</code></pre>\n<h3 id=\"浮点型-float\"><a href=\"#浮点型-float\" class=\"headerlink\" title=\"浮点型(float)\"></a>浮点型(float)</h3><p><code>floatEx = 2.345</code></p>\n<h3 id=\"字符型-string\"><a href=\"#字符型-string\" class=\"headerlink\" title=\"字符型(string)\"></a>字符型(string)</h3><h4 id=\"1、格式\"><a href=\"#1、格式\" class=\"headerlink\" title=\"1、格式\"></a>1、格式</h4><p>1、使用单引号标识字符串</p>\n<p><code>stringEx = &#39;my code&#39;</code></p>\n<p>2、使用双引号标识字符串</p>\n<p><code>stringEx = &quot;my code&quot;</code></p>\n<blockquote>\n<p>在双引号中可以使用单引号<code>stringEx = &quot;&#39;my&#39;,&#39;code&#39;&quot;</code></p>\n</blockquote>\n<p>3、使用三单引号或三双引号来表示多行的字符串，可以在三引号中使用单引号和双引号</p>","more":"<pre><code class=\"python\">stringEx = &#39;&#39;&#39;\nmy code\noh, this is &#39;cat&#39;\nyes, l like &quot;it&quot;\n&#39;&#39;&#39;\nprint(stringEx)\n&quot;&quot;&quot;\nmy code\noh, this is &#39;cat&#39;\nyes, l like &quot;it&quot;\n&quot;&quot;&quot;\n</code></pre>\n<blockquote>\n<p>同时三单引号和三双引号在Python也表示多行注释</p>\n</blockquote>\n<h4 id=\"2、一些字符串的操作\"><a href=\"#2、一些字符串的操作\" class=\"headerlink\" title=\"2、一些字符串的操作\"></a>2、一些字符串的操作</h4><p>1、获取字符串<code>abcdefgh</code>中的<code>bc</code></p>\n<pre><code class=\"python\">stringEx = &#39;abcdefgh&#39;\nprint(stringEx[1:3])\n# bc\n</code></pre>\n<p>2、循环输出字符串的每个字符</p>\n<pre><code class=\"python\">stringEx = &#39;abcdefgh&#39;\nfor s in stringEx:\n  print(s)\n</code></pre>\n<h3 id=\"布尔型-bool\"><a href=\"#布尔型-bool\" class=\"headerlink\" title=\"布尔型(bool)\"></a>布尔型(bool)</h3><p><code>boolEx = True</code></p>\n<p><code>boolEx = False</code></p>\n<h3 id=\"列表-list\"><a href=\"#列表-list\" class=\"headerlink\" title=\"列表(list)\"></a>列表(list)</h3><h4 id=\"1、格式-1\"><a href=\"#1、格式-1\" class=\"headerlink\" title=\"1、格式\"></a>1、格式</h4><p><code>变量名 = [值1, 值2, 值3]</code></p>\n<h4 id=\"2、初始化\"><a href=\"#2、初始化\" class=\"headerlink\" title=\"2、初始化\"></a>2、初始化</h4><pre><code class=\"python\"># 初始化一个空列表\nlistEx = []\n\n# 初始化一个都为整型的列表\nlistEx = [1, 2, ,3, 4, 5]\n\n# 初始化连续的数字 [5, 6, 7, 8, 9]\nlistEx = [n for n in range(5, 10)]\n\n# 初始化n个相同值的列表 [1, 1, 1, 1, 1]\nlistEx = [1 for n in range(5)] #第一种\nlistEx = [1] * 5 #第二种\n</code></pre>\n<h4 id=\"3、列表的操作\"><a href=\"#3、列表的操作\" class=\"headerlink\" title=\"3、列表的操作\"></a>3、列表的操作</h4><p><code>listEx = [1, 2, 3]</code></p>\n<h4 id=\"1、列表中增加值\"><a href=\"#1、列表中增加值\" class=\"headerlink\" title=\"1、列表中增加值\"></a>1、列表中增加值</h4><pre><code class=\"python\">#插入指定值的后面,如果列表中有多个指定的值，则会插入在一个指定值的后面\nlistEx.insert(2, &#39;bob&#39;)\n\n#追加在列表的最后面 [1, 2, 3, &#39;bob&#39;]\nlistEx.append(&#39;bob&#39;)\n\n#追加多个值 [1, 2, 3, &#39;joe&#39;, &#39;hode&#39;]\nlistEx.extend([&#39;joe&#39;, &#39;hode&#39;])\n</code></pre>\n<blockquote>\n<p>一些意外的写法</p>\n<p><code>listEx.append([&#39;bob&#39;, &#39;joe&#39;])</code>得到的是<code>[1, 2, 3, [&#39;bob&#39;, &#39;joe&#39;]]</code></p>\n<p><code>listEx.extend(&#39;bob&#39;)</code>得到的是<code>[1, 2, 3, &#39;b&#39;, &#39;o&#39;, &#39;b&#39;]</code></p>\n</blockquote>\n<h4 id=\"2、列表中删除值\"><a href=\"#2、列表中删除值\" class=\"headerlink\" title=\"2、列表中删除值\"></a>2、列表中删除值</h4><pre><code class=\"python\">#删除指定的值\nlistEx.remove(2) #删除的列表中第一个值为2的\n\n#删除从1到2位置的值\ndel listEx[1:2]\n</code></pre>\n<h3 id=\"元组-tuple\"><a href=\"#元组-tuple\" class=\"headerlink\" title=\"元组(tuple)\"></a>元组(tuple)</h3><h4 id=\"1、格式-2\"><a href=\"#1、格式-2\" class=\"headerlink\" title=\"1、格式\"></a>1、格式</h4><p><code>变量 = (值1, 值2, 值3)</code></p>\n<blockquote>\n<p>元组与列表类似，不同之处在于元组的元素不能修改</p>\n</blockquote>\n<h4 id=\"2、使用\"><a href=\"#2、使用\" class=\"headerlink\" title=\"2、使用\"></a>2、使用</h4><pre><code class=\"python\">tupleEx = ( &#39;abcd&#39;, 786 , 2.23, &#39;runoob&#39;, 70.2  )\ntinytuple = (123, &#39;runoob&#39;)\n\nprint (tupleEx)             # 输出完整元组\nprint (tupleEx[0])          # 输出元组的第一个元素\nprint (tupleEx[1:3])        # 输出从第二个元素开始到第三个元素\nprint (tupleEx[2:])         # 输出从第三个元素开始的所有元素\nprint (tinytuple * 2)     # 输出两次元组\nprint (tupleEx + tinytuple) # 连接元组\n</code></pre>\n<blockquote>\n<p>string、list 和 tuple 都属于 sequence（序列）。</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>1、与字符串一样，元组的元素不能修改。</li>\n<li>2、元组也可以被索引和切片，方法一样。</li>\n<li>3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。</li>\n<li>4、元组也可以使用+操作符进行拼接。</li>\n</ul>\n</blockquote>\n<p><strong>特殊的使用</strong></p>\n<pre><code class=\"python\"># 虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。\nlistEx = [1, 2, 3]\nletter = ([1, 2, 3], &#39;a&#39;)\nletter[0][2] = 5\nprint(letter)\n</code></pre>\n<h3 id=\"集合-set\"><a href=\"#集合-set\" class=\"headerlink\" title=\"集合(set)\"></a>集合(set)</h3><h4 id=\"1、格式-3\"><a href=\"#1、格式-3\" class=\"headerlink\" title=\"1、格式\"></a>1、格式</h4><p>集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。</p>\n<p>基本功能是进行成员关系测试和删除重复元素。</p>\n<p>可以使用大括号 <strong>{ }</strong> 或者 <strong>set()</strong> 函数创建集合</p>\n<blockquote>\n<p><strong>注意：</strong>创建一个空集合必须用 <strong>set()</strong> 而不是 **{ }**，因为 <strong>{ }</strong> 是用来创建一个空字典。</p>\n</blockquote>\n<h4 id=\"2、使用-1\"><a href=\"#2、使用-1\" class=\"headerlink\" title=\"2、使用\"></a>2、使用</h4><pre><code class=\"python\"># 在if中的使用\nsites = &#123;&#39;Google&#39;, &#39;Taobao&#39;, &#39;Runoob&#39;, &#39;Facebook&#39;, &#39;Zhihu&#39;, &#39;Baidu&#39;, &#39;Taobao&#39;&#125;\nprint(sites)\n# &#123;&#39;Google&#39;, &#39;Taobao&#39;, &#39;Runoob&#39;, &#39;Facebook&#39;, &#39;Zhihu&#39;, &#39;Baidu&#39;&#125;\n</code></pre>\n<blockquote>\n<p><strong>重复的元素会被自动过滤掉，而且输出的集合中的顺序是随机的</strong></p>\n</blockquote>\n<h4 id=\"3、集合的运算\"><a href=\"#3、集合的运算\" class=\"headerlink\" title=\"3、集合的运算\"></a>3、集合的运算</h4><pre><code class=\"python\"># set可以进行集合运算\na = set(&#39;abracadabra&#39;)\nb = set(&#39;alacazam&#39;)\n\nprint(a)\n\nprint(a - b)     # a 和 b 的差集  在a中有的且在b中没有的\n# &#123;&#39;d&#39;, &#39;b&#39;, &#39;r&#39;&#125;\nprint(b - a)         # b 和 a 的差集  在b中有的且在a中没有的\n# &#123;&#39;l&#39;, &#39;m&#39;, &#39;z&#39;&#125;\n\nprint(a | b)     # a 和 b 的并集\n# &#123;&#39;d&#39;, &#39;z&#39;, &#39;b&#39;, &#39;a&#39;, &#39;r&#39;, &#39;m&#39;, &#39;c&#39;, &#39;l&#39;&#125;\n\nprint(a &amp; b)     # a 和 b 的交集\n#&#123;&#39;a&#39;, &#39;c&#39;&#125;\n\nprint(a ^ b)         # a 和 b 中不同时存在的元素\n# &#123;&#39;d&#39;, &#39;z&#39;, &#39;b&#39;, &#39;l&#39;, &#39;r&#39;, &#39;m&#39;&#125;\n</code></pre>\n<h3 id=\"字典-dictionary\"><a href=\"#字典-dictionary\" class=\"headerlink\" title=\"字典(dictionary)\"></a>字典(dictionary)</h3><h4 id=\"1、格式-4\"><a href=\"#1、格式-4\" class=\"headerlink\" title=\"1、格式\"></a>1、格式</h4><p>列表是有序的对象集合，字典是无序的对象集合。</p>\n<blockquote>\n<p>列表和字典的区别：字典中的元素是通过键来存取，而不是通过偏移存取</p>\n</blockquote>\n<p>字典是一种映射类型，字典用<code>&#123;&#125;</code>标识，它是一个无序的<code>键(key): 值(value)</code>的集合</p>\n<p>在同一个字典中，键(key)必须是惟一的</p>\n<pre><code class=\"python\">dictEx = &#123;\n  &#39;a&#39;: 1,\n  &#39;b&#39;: 2\nEx\ndictEx[1] = &#39;abc&#39;\n\nprint(dictEx)\n# &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, 1: &#39;abc&#39;&#125;\n\nprint(list(dictEx.keys()) # 输出所有的键\n# [&#39;a&#39;, &#39;b&#39;, 1]\nprint(list(dictEx.values()) # 输出所有的值\n# [1, 2, &#39;abc&#39;]\n</code></pre>\n<h4 id=\"2、一些构建字典的写法\"><a href=\"#2、一些构建字典的写法\" class=\"headerlink\" title=\"2、一些构建字典的写法\"></a>2、一些构建字典的写法</h4><pre><code class=\"python\">listEx = [(&#39;python&#39;, 1), (&#39;php&#39;, 2), (&#39;golang&#39;, 3)]\nprint(dict(listEx))\n# &#123;&#39;python&#39;: 1, &#39;php&#39;: 2, &#39;golang&#39;: 3&#125;\n\ndictEx = &#123;x: x**2 for x in (2, 4, 6)&#125;\nprint(dictEx)\n# &#123;2: 4, 4: 16, 6: 36&#125;\n\ndictEx = dict(python=1, php=2, golang=3)\nprint(dictEx)\n# &#123;&#39;python&#39;: 1, &#39;php&#39;: 2, &#39;golang&#39;: 3&#125;\n</code></pre>\n<blockquote>\n<p><code>x**2</code>中<code>**</code>表示幂，<code>2**3</code>表示2的3次方</p>\n</blockquote>"},{"title":"Python--数据类型总览--列表详情","date":"2021-04-29T02:51:22.000Z","description":"数据类型总览--列表详情","_content":"\n## 一、格式\n\n`变量名 = [值1, 值2, 值3]`\n\n![列表](https://www.runoob.com/wp-content/uploads/2014/05/positive-indexes-1.png)\n\n## 二、初始化\n\n```python\n# 初始化一个空列表\nlistEx = []\n\n# 初始化一个都为整型的列表\nlistEx = [1, 2, ,3, 4, 5]\n\n# 初始化连续的数字 [5, 6, 7, 8, 9]\nlistEx = [n for n in range(5, 10)]\n\n# 初始化n个相同值的列表 [1, 1, 1, 1, 1]\nlistEx = [1 for n in range(5)] #第一种\nlistEx = [1] * 5 #第二种\n```\n\n## 三、列表的操作\n\n`listEx = [1, 2, 3]`\n\n### 1、列表中增加值/修改值\n\n```python\n#插入指定值的后面,如果列表中有多个指定的值，则会插入在一个指定值的后面\nlistEx.insert(2, 'bob')\n\n#追加在列表的最后面 [1, 2, 3, 'bob']\nlistEx.append('bob')\n\n#追加多个值 [1, 2, 3, 'joe', 'hode']\nlistEx.extend(['joe', 'hode'])\n\n#修改索引2的值\nlistEx[2] = '2333'\n```\n<!-- more -->\n> 一些意外的写法\n>\n> `listEx.append(['bob', 'joe'])`得到的是`[1, 2, 3, ['bob', 'joe']]`\n>\n> `listEx.extend('bob')`得到的是`[1, 2, 3, 'b', 'o', 'b']`\n\n### 2、列表中删除值\n\n```python\n#删除指定的值\nlistEx.remove(2) #删除的列表中第一个值为2的\n\n#删除从1到2位置的值\ndel listEx[1:2]\n```\n\n### 3、列表截取与拼接\n\n截取值的写法`列表[索引1:索引3]`,  会截取索引1(包括1)到索引3(不包括)之间的值\n\n```python\nlistEx = [10, 20, 30, 40, 50, 60, 70]\nprint(listEx[1:5])  # 正常索引值截取\n# [20, 30, 40, 50]\nprint(listEx[1:-1]) # 负数索引值截取\n# [20, 30, 40, 50, 60]\n```\n\n**列表截取可以传入第三个值**\n\n```python\nlistEx = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(listEx[1:6:3])\n# [2, 5]\n```\n\n> 解释：截取索引1到索引6的值为`2, 3, 4, 5, 6`，第三个参数是3，就是每间隔3个取一个就是`2, 5`\n\n列表的拼接操作\n\n```python\nlistEx = [1, 2, 3]\nlistEx += [4, 5, 6]\nprint(listEx)\n# [1, 2, 3, 4, 5, 6]\n```\n\n### 4、列表的排序\n\n#### 1. sorted() 临时排序\n\n```python\nnum_list = [6, 3, 5, 1, 2, 4, 6, 9]\nprint(sorted(num_list))\n#输出 [1, 2, 3, 4, 5, 6, 6, 9]\n```\n\n#### 2.永久性排序\n\n```python\nnum_list = [6, 3, 5, 1, 2, 4, 6, 9]\nnum_list.sort()\nprint(num_list)\n#输出 [1, 2, 3, 4, 5, 6, 6, 9]\nnum_list.sort(reverse=True)\nprint(num_list)\n#输出 [9, 6, 6, 5, 4, 3, 2, 1]\n\n# 二维列表排序\ndef sortSecond(item):\n    return item[1]\nnum_list = [[1,2], [3,4], [2,3], [5,9]]\nnum_list.sort(key=sortSecond)\nprint(num_list)\n# [[1, 2], [2, 3], [3, 4], [5, 9]]\n```\n\n#### 3.永久性翻转列表顺序\n\n```python\nnum_list = [6, 3, 5, 1, 2, 4, 6, 9]\nnum_list.reverse()\nprint(num_list)\n#输出 [9, 6, 4, 2, 1, 5, 3, 6]\n```\n\n### 5、列表脚本操作符\n\n列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表。\n\n| Python表达式                          | 结果                         | 描述                 |\n| ------------------------------------- | ---------------------------- | -------------------- |\n| len([1,2,3])                          | 3                            | 长度                 |\n| [1,2,3]+[4,5,6]                       | [1,2,3,4,5,6]                | 组合                 |\n| ['Hi!'] * 4                           | ['Hi!', 'Hi!', 'Hi!', 'Hi!'] | 重复                 |\n| 3 in [1, 2, 3]                        | True                         | 元素是否存在于列表中 |\n| for x in [1, 2, 3]: print(x, end=\" \") | 1 2 3                        | 迭代                 |\n\n## 四、列表的函数&方法\n\n### 1、函数[上面有些用到过]\n\n| 函数      | 描述               |\n| --------- | ------------------ |\n| len(list) | 列表元素的个数     |\n| max(list) | 返回列表元素最大值 |\n| min(list) | 返回列表元素最小值 |\n| list(seq) | 将元组转换为列表   |\n\n### 2、列表方法\n\n| 方法                               | 描述                                                         |\n| ---------------------------------- | ------------------------------------------------------------ |\n| list.append(obj)                   | 在列表末尾添加新的对象                                       |\n| list.count(obj)                    | 统计某个元素在列表中出现的次数                               |\n| list.extend(seq)                   | 在列表末尾一次性追加另一个序列中的多个值                     |\n| list.index(obj)                    | 在列表中找出某个值第一个匹配项的索引位置                     |\n| list.insert(index, obj)            | 将对象插入到index的后面                                      |\n| list.pop(index=-1)                 | 移除列表中的一个元素（默认是最后一个元素），并且返回该元素的值 |\n| list.remove(obj)                   | 移除列表中的某个值得第一个匹配项                             |\n| list.reverse()                     | 反向列表中的元素                                             |\n| list.sort(key=None, reverse=False) | 对原列表进行排序                                             |\n| list.clear()                       | 清空列表                                                     |\n| list.copy()                        | 复制列表                                                     |\n\n## 五、列表注意\n\n#### \t1、列表赋值\n\n```python\nfoods = ['pizza', 'falafel']\nmy_foods = foods\nfoods.append('ice cream')\nprint(my_foods)\n#输出 ['pizza', 'falafel', 'ice cream']\n\nfoods = ['pizza', 'falafel']\nmy_foods = foods[:]\nfoods.append('ice cream')\nprint(my_foods)\n#输出 ['pizza', 'falafel']\n```\n\n#### \t2、列表在作为函数参数入参时注意的\n\n```python\ndef test(param_list):\n  param_list.append(1)\n  param_list.append(2)\n# 1、对列表操作会改变之前列表\nparam_1 = []\ntest(param_1)\nprint(param_1)\n#输出 [1,2]\n\n# 2、对列表操作不会改变之前的列表\nparam_2 = []\ntest(param_2[:])\nprint(param_2)\n#输出 []\n```\n\n","source":"_posts/python/02-数据类型-列表详细.md","raw":"---\ntitle: Python--数据类型总览--列表详情\ndate: 2021-04-29 10:51:22\ntags: Python\ncategories: Python\ndescription: 数据类型总览--列表详情\n---\n\n## 一、格式\n\n`变量名 = [值1, 值2, 值3]`\n\n![列表](https://www.runoob.com/wp-content/uploads/2014/05/positive-indexes-1.png)\n\n## 二、初始化\n\n```python\n# 初始化一个空列表\nlistEx = []\n\n# 初始化一个都为整型的列表\nlistEx = [1, 2, ,3, 4, 5]\n\n# 初始化连续的数字 [5, 6, 7, 8, 9]\nlistEx = [n for n in range(5, 10)]\n\n# 初始化n个相同值的列表 [1, 1, 1, 1, 1]\nlistEx = [1 for n in range(5)] #第一种\nlistEx = [1] * 5 #第二种\n```\n\n## 三、列表的操作\n\n`listEx = [1, 2, 3]`\n\n### 1、列表中增加值/修改值\n\n```python\n#插入指定值的后面,如果列表中有多个指定的值，则会插入在一个指定值的后面\nlistEx.insert(2, 'bob')\n\n#追加在列表的最后面 [1, 2, 3, 'bob']\nlistEx.append('bob')\n\n#追加多个值 [1, 2, 3, 'joe', 'hode']\nlistEx.extend(['joe', 'hode'])\n\n#修改索引2的值\nlistEx[2] = '2333'\n```\n<!-- more -->\n> 一些意外的写法\n>\n> `listEx.append(['bob', 'joe'])`得到的是`[1, 2, 3, ['bob', 'joe']]`\n>\n> `listEx.extend('bob')`得到的是`[1, 2, 3, 'b', 'o', 'b']`\n\n### 2、列表中删除值\n\n```python\n#删除指定的值\nlistEx.remove(2) #删除的列表中第一个值为2的\n\n#删除从1到2位置的值\ndel listEx[1:2]\n```\n\n### 3、列表截取与拼接\n\n截取值的写法`列表[索引1:索引3]`,  会截取索引1(包括1)到索引3(不包括)之间的值\n\n```python\nlistEx = [10, 20, 30, 40, 50, 60, 70]\nprint(listEx[1:5])  # 正常索引值截取\n# [20, 30, 40, 50]\nprint(listEx[1:-1]) # 负数索引值截取\n# [20, 30, 40, 50, 60]\n```\n\n**列表截取可以传入第三个值**\n\n```python\nlistEx = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(listEx[1:6:3])\n# [2, 5]\n```\n\n> 解释：截取索引1到索引6的值为`2, 3, 4, 5, 6`，第三个参数是3，就是每间隔3个取一个就是`2, 5`\n\n列表的拼接操作\n\n```python\nlistEx = [1, 2, 3]\nlistEx += [4, 5, 6]\nprint(listEx)\n# [1, 2, 3, 4, 5, 6]\n```\n\n### 4、列表的排序\n\n#### 1. sorted() 临时排序\n\n```python\nnum_list = [6, 3, 5, 1, 2, 4, 6, 9]\nprint(sorted(num_list))\n#输出 [1, 2, 3, 4, 5, 6, 6, 9]\n```\n\n#### 2.永久性排序\n\n```python\nnum_list = [6, 3, 5, 1, 2, 4, 6, 9]\nnum_list.sort()\nprint(num_list)\n#输出 [1, 2, 3, 4, 5, 6, 6, 9]\nnum_list.sort(reverse=True)\nprint(num_list)\n#输出 [9, 6, 6, 5, 4, 3, 2, 1]\n\n# 二维列表排序\ndef sortSecond(item):\n    return item[1]\nnum_list = [[1,2], [3,4], [2,3], [5,9]]\nnum_list.sort(key=sortSecond)\nprint(num_list)\n# [[1, 2], [2, 3], [3, 4], [5, 9]]\n```\n\n#### 3.永久性翻转列表顺序\n\n```python\nnum_list = [6, 3, 5, 1, 2, 4, 6, 9]\nnum_list.reverse()\nprint(num_list)\n#输出 [9, 6, 4, 2, 1, 5, 3, 6]\n```\n\n### 5、列表脚本操作符\n\n列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表。\n\n| Python表达式                          | 结果                         | 描述                 |\n| ------------------------------------- | ---------------------------- | -------------------- |\n| len([1,2,3])                          | 3                            | 长度                 |\n| [1,2,3]+[4,5,6]                       | [1,2,3,4,5,6]                | 组合                 |\n| ['Hi!'] * 4                           | ['Hi!', 'Hi!', 'Hi!', 'Hi!'] | 重复                 |\n| 3 in [1, 2, 3]                        | True                         | 元素是否存在于列表中 |\n| for x in [1, 2, 3]: print(x, end=\" \") | 1 2 3                        | 迭代                 |\n\n## 四、列表的函数&方法\n\n### 1、函数[上面有些用到过]\n\n| 函数      | 描述               |\n| --------- | ------------------ |\n| len(list) | 列表元素的个数     |\n| max(list) | 返回列表元素最大值 |\n| min(list) | 返回列表元素最小值 |\n| list(seq) | 将元组转换为列表   |\n\n### 2、列表方法\n\n| 方法                               | 描述                                                         |\n| ---------------------------------- | ------------------------------------------------------------ |\n| list.append(obj)                   | 在列表末尾添加新的对象                                       |\n| list.count(obj)                    | 统计某个元素在列表中出现的次数                               |\n| list.extend(seq)                   | 在列表末尾一次性追加另一个序列中的多个值                     |\n| list.index(obj)                    | 在列表中找出某个值第一个匹配项的索引位置                     |\n| list.insert(index, obj)            | 将对象插入到index的后面                                      |\n| list.pop(index=-1)                 | 移除列表中的一个元素（默认是最后一个元素），并且返回该元素的值 |\n| list.remove(obj)                   | 移除列表中的某个值得第一个匹配项                             |\n| list.reverse()                     | 反向列表中的元素                                             |\n| list.sort(key=None, reverse=False) | 对原列表进行排序                                             |\n| list.clear()                       | 清空列表                                                     |\n| list.copy()                        | 复制列表                                                     |\n\n## 五、列表注意\n\n#### \t1、列表赋值\n\n```python\nfoods = ['pizza', 'falafel']\nmy_foods = foods\nfoods.append('ice cream')\nprint(my_foods)\n#输出 ['pizza', 'falafel', 'ice cream']\n\nfoods = ['pizza', 'falafel']\nmy_foods = foods[:]\nfoods.append('ice cream')\nprint(my_foods)\n#输出 ['pizza', 'falafel']\n```\n\n#### \t2、列表在作为函数参数入参时注意的\n\n```python\ndef test(param_list):\n  param_list.append(1)\n  param_list.append(2)\n# 1、对列表操作会改变之前列表\nparam_1 = []\ntest(param_1)\nprint(param_1)\n#输出 [1,2]\n\n# 2、对列表操作不会改变之前的列表\nparam_2 = []\ntest(param_2[:])\nprint(param_2)\n#输出 []\n```\n\n","slug":"python/02-数据类型-列表详细","published":1,"updated":"2021-04-29T08:48:39.070Z","_id":"cko3q9ijm00038u090ucng7d8","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、格式\"><a href=\"#一、格式\" class=\"headerlink\" title=\"一、格式\"></a>一、格式</h2><p><code>变量名 = [值1, 值2, 值3]</code></p>\n<p><img data-src=\"https://www.runoob.com/wp-content/uploads/2014/05/positive-indexes-1.png\" alt=\"列表\"></p>\n<h2 id=\"二、初始化\"><a href=\"#二、初始化\" class=\"headerlink\" title=\"二、初始化\"></a>二、初始化</h2><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 初始化一个空列表</span>\nlistEx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 初始化一个都为整型的列表</span>\nlistEx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 初始化连续的数字 [5, 6, 7, 8, 9]</span>\nlistEx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>n <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 初始化n个相同值的列表 [1, 1, 1, 1, 1]</span>\nlistEx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span> <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\" spellcheck=\"true\">#第一种</span>\nlistEx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span> <span class=\"token comment\" spellcheck=\"true\">#第二种</span>\n</code></pre>\n<h2 id=\"三、列表的操作\"><a href=\"#三、列表的操作\" class=\"headerlink\" title=\"三、列表的操作\"></a>三、列表的操作</h2><p><code>listEx = [1, 2, 3]</code></p>\n<h3 id=\"1、列表中增加值-修改值\"><a href=\"#1、列表中增加值-修改值\" class=\"headerlink\" title=\"1、列表中增加值/修改值\"></a>1、列表中增加值/修改值</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#插入指定值的后面,如果列表中有多个指定的值，则会插入在一个指定值的后面</span>\nlistEx<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bob'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">#追加在列表的最后面 [1, 2, 3, 'bob']</span>\nlistEx<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'bob'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">#追加多个值 [1, 2, 3, 'joe', 'hode']</span>\nlistEx<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'joe'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hode'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">#修改索引2的值</span>\nlistEx<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'2333'</span>\n</code></pre>\n<span id=\"more\"></span>\n<blockquote>\n<p>一些意外的写法</p>\n<p><code>listEx.append([&#39;bob&#39;, &#39;joe&#39;])</code>得到的是<code>[1, 2, 3, [&#39;bob&#39;, &#39;joe&#39;]]</code></p>\n<p><code>listEx.extend(&#39;bob&#39;)</code>得到的是<code>[1, 2, 3, &#39;b&#39;, &#39;o&#39;, &#39;b&#39;]</code></p>\n</blockquote>\n<h3 id=\"2、列表中删除值\"><a href=\"#2、列表中删除值\" class=\"headerlink\" title=\"2、列表中删除值\"></a>2、列表中删除值</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#删除指定的值</span>\nlistEx<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#删除的列表中第一个值为2的</span>\n\n<span class=\"token comment\" spellcheck=\"true\">#删除从1到2位置的值</span>\n<span class=\"token keyword\">del</span> listEx<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<h3 id=\"3、列表截取与拼接\"><a href=\"#3、列表截取与拼接\" class=\"headerlink\" title=\"3、列表截取与拼接\"></a>3、列表截取与拼接</h3><p>截取值的写法<code>列表[索引1:索引3]</code>,  会截取索引1(包括1)到索引3(不包括)之间的值</p>\n<pre class=\" language-python\"><code class=\"language-python\">listEx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>listEx<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\"># 正常索引值截取</span>\n<span class=\"token comment\" spellcheck=\"true\"># [20, 30, 40, 50]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>listEx<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 负数索引值截取</span>\n<span class=\"token comment\" spellcheck=\"true\"># [20, 30, 40, 50, 60]</span>\n</code></pre>\n<p><strong>列表截取可以传入第三个值</strong></p>\n<pre class=\" language-python\"><code class=\"language-python\">listEx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>listEx<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># [2, 5]</span>\n</code></pre>\n<blockquote>\n<p>解释：截取索引1到索引6的值为<code>2, 3, 4, 5, 6</code>，第三个参数是3，就是每间隔3个取一个就是<code>2, 5</code></p>\n</blockquote>\n<p>列表的拼接操作</p>\n<pre class=\" language-python\"><code class=\"language-python\">listEx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nlistEx <span class=\"token operator\">+=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>listEx<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># [1, 2, 3, 4, 5, 6]</span>\n</code></pre>\n<h3 id=\"4、列表的排序\"><a href=\"#4、列表的排序\" class=\"headerlink\" title=\"4、列表的排序\"></a>4、列表的排序</h3><h4 id=\"1-sorted-临时排序\"><a href=\"#1-sorted-临时排序\" class=\"headerlink\" title=\"1. sorted() 临时排序\"></a>1. sorted() 临时排序</h4><pre class=\" language-python\"><code class=\"language-python\">num_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sorted<span class=\"token punctuation\">(</span>num_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#输出 [1, 2, 3, 4, 5, 6, 6, 9]</span>\n</code></pre>\n<h4 id=\"2-永久性排序\"><a href=\"#2-永久性排序\" class=\"headerlink\" title=\"2.永久性排序\"></a>2.永久性排序</h4><pre class=\" language-python\"><code class=\"language-python\">num_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\nnum_list<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num_list<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#输出 [1, 2, 3, 4, 5, 6, 6, 9]</span>\nnum_list<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num_list<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#输出 [9, 6, 6, 5, 4, 3, 2, 1]</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 二维列表排序</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">sortSecond</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> item<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\nnum_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\nnum_list<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span>sortSecond<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num_list<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># [[1, 2], [2, 3], [3, 4], [5, 9]]</span>\n</code></pre>\n<h4 id=\"3-永久性翻转列表顺序\"><a href=\"#3-永久性翻转列表顺序\" class=\"headerlink\" title=\"3.永久性翻转列表顺序\"></a>3.永久性翻转列表顺序</h4><pre class=\" language-python\"><code class=\"language-python\">num_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\nnum_list<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num_list<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#输出 [9, 6, 4, 2, 1, 5, 3, 6]</span>\n</code></pre>\n<h3 id=\"5、列表脚本操作符\"><a href=\"#5、列表脚本操作符\" class=\"headerlink\" title=\"5、列表脚本操作符\"></a>5、列表脚本操作符</h3><p>列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表。</p>\n<table>\n<thead>\n<tr>\n<th>Python表达式</th>\n<th>结果</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>len([1,2,3])</td>\n<td>3</td>\n<td>长度</td>\n</tr>\n<tr>\n<td>[1,2,3]+[4,5,6]</td>\n<td>[1,2,3,4,5,6]</td>\n<td>组合</td>\n</tr>\n<tr>\n<td>[‘Hi!’] * 4</td>\n<td>[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td>\n<td>重复</td>\n</tr>\n<tr>\n<td>3 in [1, 2, 3]</td>\n<td>True</td>\n<td>元素是否存在于列表中</td>\n</tr>\n<tr>\n<td>for x in [1, 2, 3]: print(x, end=” “)</td>\n<td>1 2 3</td>\n<td>迭代</td>\n</tr>\n</tbody></table>\n<h2 id=\"四、列表的函数-amp-方法\"><a href=\"#四、列表的函数-amp-方法\" class=\"headerlink\" title=\"四、列表的函数&amp;方法\"></a>四、列表的函数&amp;方法</h2><h3 id=\"1、函数-上面有些用到过\"><a href=\"#1、函数-上面有些用到过\" class=\"headerlink\" title=\"1、函数[上面有些用到过]\"></a>1、函数[上面有些用到过]</h3><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>len(list)</td>\n<td>列表元素的个数</td>\n</tr>\n<tr>\n<td>max(list)</td>\n<td>返回列表元素最大值</td>\n</tr>\n<tr>\n<td>min(list)</td>\n<td>返回列表元素最小值</td>\n</tr>\n<tr>\n<td>list(seq)</td>\n<td>将元组转换为列表</td>\n</tr>\n</tbody></table>\n<h3 id=\"2、列表方法\"><a href=\"#2、列表方法\" class=\"headerlink\" title=\"2、列表方法\"></a>2、列表方法</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>list.append(obj)</td>\n<td>在列表末尾添加新的对象</td>\n</tr>\n<tr>\n<td>list.count(obj)</td>\n<td>统计某个元素在列表中出现的次数</td>\n</tr>\n<tr>\n<td>list.extend(seq)</td>\n<td>在列表末尾一次性追加另一个序列中的多个值</td>\n</tr>\n<tr>\n<td>list.index(obj)</td>\n<td>在列表中找出某个值第一个匹配项的索引位置</td>\n</tr>\n<tr>\n<td>list.insert(index, obj)</td>\n<td>将对象插入到index的后面</td>\n</tr>\n<tr>\n<td>list.pop(index=-1)</td>\n<td>移除列表中的一个元素（默认是最后一个元素），并且返回该元素的值</td>\n</tr>\n<tr>\n<td>list.remove(obj)</td>\n<td>移除列表中的某个值得第一个匹配项</td>\n</tr>\n<tr>\n<td>list.reverse()</td>\n<td>反向列表中的元素</td>\n</tr>\n<tr>\n<td>list.sort(key=None, reverse=False)</td>\n<td>对原列表进行排序</td>\n</tr>\n<tr>\n<td>list.clear()</td>\n<td>清空列表</td>\n</tr>\n<tr>\n<td>list.copy()</td>\n<td>复制列表</td>\n</tr>\n</tbody></table>\n<h2 id=\"五、列表注意\"><a href=\"#五、列表注意\" class=\"headerlink\" title=\"五、列表注意\"></a>五、列表注意</h2><h4 id=\"1、列表赋值\"><a href=\"#1、列表赋值\" class=\"headerlink\" title=\"1、列表赋值\"></a>1、列表赋值</h4><pre class=\" language-python\"><code class=\"language-python\">foods <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'pizza'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'falafel'</span><span class=\"token punctuation\">]</span>\nmy_foods <span class=\"token operator\">=</span> foods\nfoods<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'ice cream'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_foods<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#输出 ['pizza', 'falafel', 'ice cream']</span>\n\nfoods <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'pizza'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'falafel'</span><span class=\"token punctuation\">]</span>\nmy_foods <span class=\"token operator\">=</span> foods<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\nfoods<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'ice cream'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_foods<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#输出 ['pizza', 'falafel']</span>\n</code></pre>\n<h4 id=\"2、列表在作为函数参数入参时注意的\"><a href=\"#2、列表在作为函数参数入参时注意的\" class=\"headerlink\" title=\"2、列表在作为函数参数入参时注意的\"></a>2、列表在作为函数参数入参时注意的</h4><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>param_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  param_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  param_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 1、对列表操作会改变之前列表</span>\nparam_1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\ntest<span class=\"token punctuation\">(</span>param_1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>param_1<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#输出 [1,2]</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 2、对列表操作不会改变之前的列表</span>\nparam_2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\ntest<span class=\"token punctuation\">(</span>param_2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>param_2<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#输出 []</span>\n</code></pre>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、格式\"><a href=\"#一、格式\" class=\"headerlink\" title=\"一、格式\"></a>一、格式</h2><p><code>变量名 = [值1, 值2, 值3]</code></p>\n<p><img data-src=\"https://www.runoob.com/wp-content/uploads/2014/05/positive-indexes-1.png\" alt=\"列表\"></p>\n<h2 id=\"二、初始化\"><a href=\"#二、初始化\" class=\"headerlink\" title=\"二、初始化\"></a>二、初始化</h2><pre><code class=\"python\"># 初始化一个空列表\nlistEx = []\n\n# 初始化一个都为整型的列表\nlistEx = [1, 2, ,3, 4, 5]\n\n# 初始化连续的数字 [5, 6, 7, 8, 9]\nlistEx = [n for n in range(5, 10)]\n\n# 初始化n个相同值的列表 [1, 1, 1, 1, 1]\nlistEx = [1 for n in range(5)] #第一种\nlistEx = [1] * 5 #第二种\n</code></pre>\n<h2 id=\"三、列表的操作\"><a href=\"#三、列表的操作\" class=\"headerlink\" title=\"三、列表的操作\"></a>三、列表的操作</h2><p><code>listEx = [1, 2, 3]</code></p>\n<h3 id=\"1、列表中增加值-修改值\"><a href=\"#1、列表中增加值-修改值\" class=\"headerlink\" title=\"1、列表中增加值/修改值\"></a>1、列表中增加值/修改值</h3><pre><code class=\"python\">#插入指定值的后面,如果列表中有多个指定的值，则会插入在一个指定值的后面\nlistEx.insert(2, &#39;bob&#39;)\n\n#追加在列表的最后面 [1, 2, 3, &#39;bob&#39;]\nlistEx.append(&#39;bob&#39;)\n\n#追加多个值 [1, 2, 3, &#39;joe&#39;, &#39;hode&#39;]\nlistEx.extend([&#39;joe&#39;, &#39;hode&#39;])\n\n#修改索引2的值\nlistEx[2] = &#39;2333&#39;\n</code></pre>","more":"<blockquote>\n<p>一些意外的写法</p>\n<p><code>listEx.append([&#39;bob&#39;, &#39;joe&#39;])</code>得到的是<code>[1, 2, 3, [&#39;bob&#39;, &#39;joe&#39;]]</code></p>\n<p><code>listEx.extend(&#39;bob&#39;)</code>得到的是<code>[1, 2, 3, &#39;b&#39;, &#39;o&#39;, &#39;b&#39;]</code></p>\n</blockquote>\n<h3 id=\"2、列表中删除值\"><a href=\"#2、列表中删除值\" class=\"headerlink\" title=\"2、列表中删除值\"></a>2、列表中删除值</h3><pre><code class=\"python\">#删除指定的值\nlistEx.remove(2) #删除的列表中第一个值为2的\n\n#删除从1到2位置的值\ndel listEx[1:2]\n</code></pre>\n<h3 id=\"3、列表截取与拼接\"><a href=\"#3、列表截取与拼接\" class=\"headerlink\" title=\"3、列表截取与拼接\"></a>3、列表截取与拼接</h3><p>截取值的写法<code>列表[索引1:索引3]</code>,  会截取索引1(包括1)到索引3(不包括)之间的值</p>\n<pre><code class=\"python\">listEx = [10, 20, 30, 40, 50, 60, 70]\nprint(listEx[1:5])  # 正常索引值截取\n# [20, 30, 40, 50]\nprint(listEx[1:-1]) # 负数索引值截取\n# [20, 30, 40, 50, 60]\n</code></pre>\n<p><strong>列表截取可以传入第三个值</strong></p>\n<pre><code class=\"python\">listEx = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(listEx[1:6:3])\n# [2, 5]\n</code></pre>\n<blockquote>\n<p>解释：截取索引1到索引6的值为<code>2, 3, 4, 5, 6</code>，第三个参数是3，就是每间隔3个取一个就是<code>2, 5</code></p>\n</blockquote>\n<p>列表的拼接操作</p>\n<pre><code class=\"python\">listEx = [1, 2, 3]\nlistEx += [4, 5, 6]\nprint(listEx)\n# [1, 2, 3, 4, 5, 6]\n</code></pre>\n<h3 id=\"4、列表的排序\"><a href=\"#4、列表的排序\" class=\"headerlink\" title=\"4、列表的排序\"></a>4、列表的排序</h3><h4 id=\"1-sorted-临时排序\"><a href=\"#1-sorted-临时排序\" class=\"headerlink\" title=\"1. sorted() 临时排序\"></a>1. sorted() 临时排序</h4><pre><code class=\"python\">num_list = [6, 3, 5, 1, 2, 4, 6, 9]\nprint(sorted(num_list))\n#输出 [1, 2, 3, 4, 5, 6, 6, 9]\n</code></pre>\n<h4 id=\"2-永久性排序\"><a href=\"#2-永久性排序\" class=\"headerlink\" title=\"2.永久性排序\"></a>2.永久性排序</h4><pre><code class=\"python\">num_list = [6, 3, 5, 1, 2, 4, 6, 9]\nnum_list.sort()\nprint(num_list)\n#输出 [1, 2, 3, 4, 5, 6, 6, 9]\nnum_list.sort(reverse=True)\nprint(num_list)\n#输出 [9, 6, 6, 5, 4, 3, 2, 1]\n\n# 二维列表排序\ndef sortSecond(item):\n    return item[1]\nnum_list = [[1,2], [3,4], [2,3], [5,9]]\nnum_list.sort(key=sortSecond)\nprint(num_list)\n# [[1, 2], [2, 3], [3, 4], [5, 9]]\n</code></pre>\n<h4 id=\"3-永久性翻转列表顺序\"><a href=\"#3-永久性翻转列表顺序\" class=\"headerlink\" title=\"3.永久性翻转列表顺序\"></a>3.永久性翻转列表顺序</h4><pre><code class=\"python\">num_list = [6, 3, 5, 1, 2, 4, 6, 9]\nnum_list.reverse()\nprint(num_list)\n#输出 [9, 6, 4, 2, 1, 5, 3, 6]\n</code></pre>\n<h3 id=\"5、列表脚本操作符\"><a href=\"#5、列表脚本操作符\" class=\"headerlink\" title=\"5、列表脚本操作符\"></a>5、列表脚本操作符</h3><p>列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表。</p>\n<table>\n<thead>\n<tr>\n<th>Python表达式</th>\n<th>结果</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>len([1,2,3])</td>\n<td>3</td>\n<td>长度</td>\n</tr>\n<tr>\n<td>[1,2,3]+[4,5,6]</td>\n<td>[1,2,3,4,5,6]</td>\n<td>组合</td>\n</tr>\n<tr>\n<td>[‘Hi!’] * 4</td>\n<td>[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td>\n<td>重复</td>\n</tr>\n<tr>\n<td>3 in [1, 2, 3]</td>\n<td>True</td>\n<td>元素是否存在于列表中</td>\n</tr>\n<tr>\n<td>for x in [1, 2, 3]: print(x, end=” “)</td>\n<td>1 2 3</td>\n<td>迭代</td>\n</tr>\n</tbody></table>\n<h2 id=\"四、列表的函数-amp-方法\"><a href=\"#四、列表的函数-amp-方法\" class=\"headerlink\" title=\"四、列表的函数&amp;方法\"></a>四、列表的函数&amp;方法</h2><h3 id=\"1、函数-上面有些用到过\"><a href=\"#1、函数-上面有些用到过\" class=\"headerlink\" title=\"1、函数[上面有些用到过]\"></a>1、函数[上面有些用到过]</h3><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>len(list)</td>\n<td>列表元素的个数</td>\n</tr>\n<tr>\n<td>max(list)</td>\n<td>返回列表元素最大值</td>\n</tr>\n<tr>\n<td>min(list)</td>\n<td>返回列表元素最小值</td>\n</tr>\n<tr>\n<td>list(seq)</td>\n<td>将元组转换为列表</td>\n</tr>\n</tbody></table>\n<h3 id=\"2、列表方法\"><a href=\"#2、列表方法\" class=\"headerlink\" title=\"2、列表方法\"></a>2、列表方法</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>list.append(obj)</td>\n<td>在列表末尾添加新的对象</td>\n</tr>\n<tr>\n<td>list.count(obj)</td>\n<td>统计某个元素在列表中出现的次数</td>\n</tr>\n<tr>\n<td>list.extend(seq)</td>\n<td>在列表末尾一次性追加另一个序列中的多个值</td>\n</tr>\n<tr>\n<td>list.index(obj)</td>\n<td>在列表中找出某个值第一个匹配项的索引位置</td>\n</tr>\n<tr>\n<td>list.insert(index, obj)</td>\n<td>将对象插入到index的后面</td>\n</tr>\n<tr>\n<td>list.pop(index=-1)</td>\n<td>移除列表中的一个元素（默认是最后一个元素），并且返回该元素的值</td>\n</tr>\n<tr>\n<td>list.remove(obj)</td>\n<td>移除列表中的某个值得第一个匹配项</td>\n</tr>\n<tr>\n<td>list.reverse()</td>\n<td>反向列表中的元素</td>\n</tr>\n<tr>\n<td>list.sort(key=None, reverse=False)</td>\n<td>对原列表进行排序</td>\n</tr>\n<tr>\n<td>list.clear()</td>\n<td>清空列表</td>\n</tr>\n<tr>\n<td>list.copy()</td>\n<td>复制列表</td>\n</tr>\n</tbody></table>\n<h2 id=\"五、列表注意\"><a href=\"#五、列表注意\" class=\"headerlink\" title=\"五、列表注意\"></a>五、列表注意</h2><h4 id=\"1、列表赋值\"><a href=\"#1、列表赋值\" class=\"headerlink\" title=\"1、列表赋值\"></a>1、列表赋值</h4><pre><code class=\"python\">foods = [&#39;pizza&#39;, &#39;falafel&#39;]\nmy_foods = foods\nfoods.append(&#39;ice cream&#39;)\nprint(my_foods)\n#输出 [&#39;pizza&#39;, &#39;falafel&#39;, &#39;ice cream&#39;]\n\nfoods = [&#39;pizza&#39;, &#39;falafel&#39;]\nmy_foods = foods[:]\nfoods.append(&#39;ice cream&#39;)\nprint(my_foods)\n#输出 [&#39;pizza&#39;, &#39;falafel&#39;]\n</code></pre>\n<h4 id=\"2、列表在作为函数参数入参时注意的\"><a href=\"#2、列表在作为函数参数入参时注意的\" class=\"headerlink\" title=\"2、列表在作为函数参数入参时注意的\"></a>2、列表在作为函数参数入参时注意的</h4><pre><code class=\"python\">def test(param_list):\n  param_list.append(1)\n  param_list.append(2)\n# 1、对列表操作会改变之前列表\nparam_1 = []\ntest(param_1)\nprint(param_1)\n#输出 [1,2]\n\n# 2、对列表操作不会改变之前的列表\nparam_2 = []\ntest(param_2[:])\nprint(param_2)\n#输出 []\n</code></pre>"},{"title":"Python--数据类型总览--字典详情","date":"2021-04-29T02:51:22.000Z","description":"数据类型总览--字典详情","_content":"\n## 一、格式\n\n`变量 = {key1: value1, key2: value2, key3: value3}`\n\n键必须是唯一的，但值可以不必。\n\n一个简单的字典实例：\n\n```python\ndictEx = {'name': 'runoob', 'likes': 123, 'url': 'www.runoob.com'}\n```\n\n> 如果声明字典时有相同的键，则会只存在最后面的那个键值\n>\n> `dictEx = {'python': 'one', 'php': 'two', 'python': 'three'}`\n>\n> 实际`dictEx`为`{'python': 'three', 'php': 'two'}`\n<!-- more -->\n## 二、字典操作\n\n### 1、基本操作\n\n#### 1.增加/修改字典\n\n```python\ndictEx = {'a':1, 'b':2}\n\n# 增\ndictEx['c'] = 3\nprint(dictEx)\n#输出 {'a': 1, 'b': 2, 'c': 3}\ndictEx.update({'t':1, 'd': \"66\"})\nprint(dictEx)\n#输出 {'a': 1, 'b': 2, 'c': 3, 't': 1, 'd': '66'}\n```\n\n#### 2.删除字典\n\n```python\n# 删除字典的键\ndel dictEx['b']\nprint(dictEx)\n#输出 {'a': 1, 'c': 3, 't': 1, 'd': '66'}\n\n# 清空字典\ndictEx.clear()\n\n# 删除字典\ndel dcitEx\n```\n\n#### 3.获取字典的key\n\n```python\ndict = {'jen': 'python', 'sarch': 'c'}\nfor name in dict.keys():\n    print(name.title())\n#输出\n# jen\n# sarch\n```\n\n#### 4.字典的特性\n\n1）键必须不可变，可以用数字，字符串和元组充当\n\n## 三、注意点\n\n### 1、Python 字典通过检查键值是否相等和比较哈希值来确定两个键是否相同。\n\n```python\nsome_dict = {}\nsome_dict[5.5] = \"Ruby\"\nsome_dict[5.0] = \"JavaScript\"\nsome_dict[5] = \"Python\"\nprint(some_dict[5.5])\n#输出 Ruby\nprint(some_dict[5.0])\n#输出 Python\nprint(some_dict[5])\n#输出 Python\n\nprint(hash(5.0) == hash(5))\n#输出 True\n```\n\n### 2、判断字典某个key是否存在\n\n```python\ndict_ex = {'name': 'wei', 'age': 18}\nif 'name' in dict_ex.keys():\n  return true\nelse:\n  return false\n```\n\n","source":"_posts/python/03-数据类型-字典详细.md","raw":"---\ntitle: Python--数据类型总览--字典详情\ndate: 2021-04-29 10:51:22\ntags: Python\ncategories: Python\ndescription: 数据类型总览--字典详情\n---\n\n## 一、格式\n\n`变量 = {key1: value1, key2: value2, key3: value3}`\n\n键必须是唯一的，但值可以不必。\n\n一个简单的字典实例：\n\n```python\ndictEx = {'name': 'runoob', 'likes': 123, 'url': 'www.runoob.com'}\n```\n\n> 如果声明字典时有相同的键，则会只存在最后面的那个键值\n>\n> `dictEx = {'python': 'one', 'php': 'two', 'python': 'three'}`\n>\n> 实际`dictEx`为`{'python': 'three', 'php': 'two'}`\n<!-- more -->\n## 二、字典操作\n\n### 1、基本操作\n\n#### 1.增加/修改字典\n\n```python\ndictEx = {'a':1, 'b':2}\n\n# 增\ndictEx['c'] = 3\nprint(dictEx)\n#输出 {'a': 1, 'b': 2, 'c': 3}\ndictEx.update({'t':1, 'd': \"66\"})\nprint(dictEx)\n#输出 {'a': 1, 'b': 2, 'c': 3, 't': 1, 'd': '66'}\n```\n\n#### 2.删除字典\n\n```python\n# 删除字典的键\ndel dictEx['b']\nprint(dictEx)\n#输出 {'a': 1, 'c': 3, 't': 1, 'd': '66'}\n\n# 清空字典\ndictEx.clear()\n\n# 删除字典\ndel dcitEx\n```\n\n#### 3.获取字典的key\n\n```python\ndict = {'jen': 'python', 'sarch': 'c'}\nfor name in dict.keys():\n    print(name.title())\n#输出\n# jen\n# sarch\n```\n\n#### 4.字典的特性\n\n1）键必须不可变，可以用数字，字符串和元组充当\n\n## 三、注意点\n\n### 1、Python 字典通过检查键值是否相等和比较哈希值来确定两个键是否相同。\n\n```python\nsome_dict = {}\nsome_dict[5.5] = \"Ruby\"\nsome_dict[5.0] = \"JavaScript\"\nsome_dict[5] = \"Python\"\nprint(some_dict[5.5])\n#输出 Ruby\nprint(some_dict[5.0])\n#输出 Python\nprint(some_dict[5])\n#输出 Python\n\nprint(hash(5.0) == hash(5))\n#输出 True\n```\n\n### 2、判断字典某个key是否存在\n\n```python\ndict_ex = {'name': 'wei', 'age': 18}\nif 'name' in dict_ex.keys():\n  return true\nelse:\n  return false\n```\n\n","slug":"python/03-数据类型-字典详细","published":1,"updated":"2021-04-29T08:48:39.078Z","_id":"cko3q9ijo00048u09fe607a73","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、格式\"><a href=\"#一、格式\" class=\"headerlink\" title=\"一、格式\"></a>一、格式</h2><p><code>变量 = &#123;key1: value1, key2: value2, key3: value3&#125;</code></p>\n<p>键必须是唯一的，但值可以不必。</p>\n<p>一个简单的字典实例：</p>\n<pre class=\" language-python\"><code class=\"language-python\">dictEx <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;'name': 'runoob', 'likes': 123, 'url': 'www.runoob.com'&amp;#125;</span>\n</code></pre>\n<blockquote>\n<p>如果声明字典时有相同的键，则会只存在最后面的那个键值</p>\n<p><code>dictEx = &#123;&#39;python&#39;: &#39;one&#39;, &#39;php&#39;: &#39;two&#39;, &#39;python&#39;: &#39;three&#39;&#125;</code></p>\n<p>实际<code>dictEx</code>为<code>&#123;&#39;python&#39;: &#39;three&#39;, &#39;php&#39;: &#39;two&#39;&#125;</code></p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"二、字典操作\"><a href=\"#二、字典操作\" class=\"headerlink\" title=\"二、字典操作\"></a>二、字典操作</h2><h3 id=\"1、基本操作\"><a href=\"#1、基本操作\" class=\"headerlink\" title=\"1、基本操作\"></a>1、基本操作</h3><h4 id=\"1-增加-修改字典\"><a href=\"#1-增加-修改字典\" class=\"headerlink\" title=\"1.增加/修改字典\"></a>1.增加/修改字典</h4><pre class=\" language-python\"><code class=\"language-python\">dictEx <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;'a':1, 'b':2&amp;#125;</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 增</span>\ndictEx<span class=\"token punctuation\">[</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dictEx<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#输出 &amp;#123;'a': 1, 'b': 2, 'c': 3&amp;#125;</span>\ndictEx<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;'t':1, 'd': \"66\"&amp;#125;)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dictEx<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#输出 &amp;#123;'a': 1, 'b': 2, 'c': 3, 't': 1, 'd': '66'&amp;#125;</span>\n</code></pre>\n<h4 id=\"2-删除字典\"><a href=\"#2-删除字典\" class=\"headerlink\" title=\"2.删除字典\"></a>2.删除字典</h4><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 删除字典的键</span>\n<span class=\"token keyword\">del</span> dictEx<span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dictEx<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#输出 &amp;#123;'a': 1, 'c': 3, 't': 1, 'd': '66'&amp;#125;</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 清空字典</span>\ndictEx<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 删除字典</span>\n<span class=\"token keyword\">del</span> dcitEx\n</code></pre>\n<h4 id=\"3-获取字典的key\"><a href=\"#3-获取字典的key\" class=\"headerlink\" title=\"3.获取字典的key\"></a>3.获取字典的key</h4><pre class=\" language-python\"><code class=\"language-python\">dict <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;'jen': 'python', 'sarch': 'c'&amp;#125;</span>\n<span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> dict<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#输出</span>\n<span class=\"token comment\" spellcheck=\"true\"># jen</span>\n<span class=\"token comment\" spellcheck=\"true\"># sarch</span>\n</code></pre>\n<h4 id=\"4-字典的特性\"><a href=\"#4-字典的特性\" class=\"headerlink\" title=\"4.字典的特性\"></a>4.字典的特性</h4><p>1）键必须不可变，可以用数字，字符串和元组充当</p>\n<h2 id=\"三、注意点\"><a href=\"#三、注意点\" class=\"headerlink\" title=\"三、注意点\"></a>三、注意点</h2><h3 id=\"1、Python-字典通过检查键值是否相等和比较哈希值来确定两个键是否相同。\"><a href=\"#1、Python-字典通过检查键值是否相等和比较哈希值来确定两个键是否相同。\" class=\"headerlink\" title=\"1、Python 字典通过检查键值是否相等和比较哈希值来确定两个键是否相同。\"></a>1、Python 字典通过检查键值是否相等和比较哈希值来确定两个键是否相同。</h3><pre class=\" language-python\"><code class=\"language-python\">some_dict <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;&amp;#125;</span>\nsome_dict<span class=\"token punctuation\">[</span><span class=\"token number\">5.5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Ruby\"</span>\nsome_dict<span class=\"token punctuation\">[</span><span class=\"token number\">5.0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"JavaScript\"</span>\nsome_dict<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Python\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>some_dict<span class=\"token punctuation\">[</span><span class=\"token number\">5.5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#输出 Ruby</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>some_dict<span class=\"token punctuation\">[</span><span class=\"token number\">5.0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#输出 Python</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>some_dict<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#输出 Python</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">(</span><span class=\"token number\">5.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> hash<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#输出 True</span>\n</code></pre>\n<h3 id=\"2、判断字典某个key是否存在\"><a href=\"#2、判断字典某个key是否存在\" class=\"headerlink\" title=\"2、判断字典某个key是否存在\"></a>2、判断字典某个key是否存在</h3><pre class=\" language-python\"><code class=\"language-python\">dict_ex <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;'name': 'wei', 'age': 18&amp;#125;</span>\n<span class=\"token keyword\">if</span> <span class=\"token string\">'name'</span> <span class=\"token keyword\">in</span> dict_ex<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> true\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> false\n</code></pre>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、格式\"><a href=\"#一、格式\" class=\"headerlink\" title=\"一、格式\"></a>一、格式</h2><p><code>变量 = &#123;key1: value1, key2: value2, key3: value3&#125;</code></p>\n<p>键必须是唯一的，但值可以不必。</p>\n<p>一个简单的字典实例：</p>\n<pre><code class=\"python\">dictEx = &#123;&#39;name&#39;: &#39;runoob&#39;, &#39;likes&#39;: 123, &#39;url&#39;: &#39;www.runoob.com&#39;&#125;\n</code></pre>\n<blockquote>\n<p>如果声明字典时有相同的键，则会只存在最后面的那个键值</p>\n<p><code>dictEx = &#123;&#39;python&#39;: &#39;one&#39;, &#39;php&#39;: &#39;two&#39;, &#39;python&#39;: &#39;three&#39;&#125;</code></p>\n<p>实际<code>dictEx</code>为<code>&#123;&#39;python&#39;: &#39;three&#39;, &#39;php&#39;: &#39;two&#39;&#125;</code></p>\n</blockquote>","more":"<h2 id=\"二、字典操作\"><a href=\"#二、字典操作\" class=\"headerlink\" title=\"二、字典操作\"></a>二、字典操作</h2><h3 id=\"1、基本操作\"><a href=\"#1、基本操作\" class=\"headerlink\" title=\"1、基本操作\"></a>1、基本操作</h3><h4 id=\"1-增加-修改字典\"><a href=\"#1-增加-修改字典\" class=\"headerlink\" title=\"1.增加/修改字典\"></a>1.增加/修改字典</h4><pre><code class=\"python\">dictEx = &#123;&#39;a&#39;:1, &#39;b&#39;:2&#125;\n\n# 增\ndictEx[&#39;c&#39;] = 3\nprint(dictEx)\n#输出 &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;\ndictEx.update(&#123;&#39;t&#39;:1, &#39;d&#39;: &quot;66&quot;&#125;)\nprint(dictEx)\n#输出 &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;t&#39;: 1, &#39;d&#39;: &#39;66&#39;&#125;\n</code></pre>\n<h4 id=\"2-删除字典\"><a href=\"#2-删除字典\" class=\"headerlink\" title=\"2.删除字典\"></a>2.删除字典</h4><pre><code class=\"python\"># 删除字典的键\ndel dictEx[&#39;b&#39;]\nprint(dictEx)\n#输出 &#123;&#39;a&#39;: 1, &#39;c&#39;: 3, &#39;t&#39;: 1, &#39;d&#39;: &#39;66&#39;&#125;\n\n# 清空字典\ndictEx.clear()\n\n# 删除字典\ndel dcitEx\n</code></pre>\n<h4 id=\"3-获取字典的key\"><a href=\"#3-获取字典的key\" class=\"headerlink\" title=\"3.获取字典的key\"></a>3.获取字典的key</h4><pre><code class=\"python\">dict = &#123;&#39;jen&#39;: &#39;python&#39;, &#39;sarch&#39;: &#39;c&#39;&#125;\nfor name in dict.keys():\n    print(name.title())\n#输出\n# jen\n# sarch\n</code></pre>\n<h4 id=\"4-字典的特性\"><a href=\"#4-字典的特性\" class=\"headerlink\" title=\"4.字典的特性\"></a>4.字典的特性</h4><p>1）键必须不可变，可以用数字，字符串和元组充当</p>\n<h2 id=\"三、注意点\"><a href=\"#三、注意点\" class=\"headerlink\" title=\"三、注意点\"></a>三、注意点</h2><h3 id=\"1、Python-字典通过检查键值是否相等和比较哈希值来确定两个键是否相同。\"><a href=\"#1、Python-字典通过检查键值是否相等和比较哈希值来确定两个键是否相同。\" class=\"headerlink\" title=\"1、Python 字典通过检查键值是否相等和比较哈希值来确定两个键是否相同。\"></a>1、Python 字典通过检查键值是否相等和比较哈希值来确定两个键是否相同。</h3><pre><code class=\"python\">some_dict = &#123;&#125;\nsome_dict[5.5] = &quot;Ruby&quot;\nsome_dict[5.0] = &quot;JavaScript&quot;\nsome_dict[5] = &quot;Python&quot;\nprint(some_dict[5.5])\n#输出 Ruby\nprint(some_dict[5.0])\n#输出 Python\nprint(some_dict[5])\n#输出 Python\n\nprint(hash(5.0) == hash(5))\n#输出 True\n</code></pre>\n<h3 id=\"2、判断字典某个key是否存在\"><a href=\"#2、判断字典某个key是否存在\" class=\"headerlink\" title=\"2、判断字典某个key是否存在\"></a>2、判断字典某个key是否存在</h3><pre><code class=\"python\">dict_ex = &#123;&#39;name&#39;: &#39;wei&#39;, &#39;age&#39;: 18&#125;\nif &#39;name&#39; in dict_ex.keys():\n  return true\nelse:\n  return false\n</code></pre>"},{"title":"Python--数据类型总览--字符串详情","date":"2021-04-29T02:51:22.000Z","description":"数据类型总览--字符串详情","_content":"\n### 1、字符串运算符\n\n`a = Hello` `b = Python`\n\n| 操作符 | 描述                                                         | 实例                          |\n| ------ | ------------------------------------------------------------ | ----------------------------- |\n| +      | 字符串连接                                                   | a + b <br />输出：HelloPython |\n| *      | 重复输出字符                                                 | a*2 <br />输出：HelloHello    |\n| []     | 通过索引输出字符串                                           | a[1]<br />输出：e             |\n| [:]    | 截取字符串中的一部分，遵循 **左闭右开** 原则，str[0:2]是不包含第3个字符的 | a[1:4]<br />输出：ell         |\n| in     | 成员运算符--如果字符串中包含给定字符就返回True               | 'H' in a<br />输出：True      |\n| not in | 成员运算符--如果字符串中不包含给定的字符返货True             | 'M' not in a<br />输出：True  |\n| r/R    | 原始字符串                                                   | print(r'\\a') <br />输出：\\a   |\n| %      | 格式字符串                                                   | 配合格式化符号使用            |\n<!-- more -->\n### 2、字符串格式化\n\n`print(\"i am %s\" % \"jack\")`\n\n| 符号 | 描述                                       |\n| ---- | ------------------------------------------ |\n| %c   | 格式化字符及其ASCII码                      |\n| %s   | 格式化字符串                               |\n| %d   | 格式化整数                                 |\n| %u   | 格式化无符号整数                           |\n| %o   | 格式化无符号八进制数                       |\n| %x   | 格式化无符号十六进制数                     |\n| %X   | 格式化无符号十六进制数（大写）             |\n| %f   | 格式化浮点数字，可指定小数点后的精度[%.2f] |\n| %e   | 用科学技术法格式化浮点数                   |\n| %E   | 作用同%e                                   |\n| %g   | %f和%e的简写                               |\n| %G   | %f和%E的简写                               |\n| %p   | 用十六进制数格式化变量的地址               |\n\n### 3、字符串内建函数\n\n#### 1.* `capitalize()`\n\n将字符串的第一个字符转换为大写\n\n```python\nstrEx = 'hello'\nprint(strEx.capitalize())\n# Hello\n```\n\n#### 2. `center(width, fillchar)`\n\n返回一个指定的宽度width居中的字符串，fillchar为填充的字符，默认为空格\n\n```python\nstrEx = 'hello'\nprint(strEx.center(10, '-'))\n# --hello---\n```\n\n#### 3.* `count(str, beg=0, end=len(string))`\n\n返回str在string里面出现的次数，如果beg[闭区间]或者end指定则返回指定范围内str出现的次数\n\n```python\nstrEx = 'hello'\nprint(strEx.count('l'))\n# 2\n\nprint(strEx.count('l', 3))\n# 1\n```\n\n#### 4. `bytes.decode(encoding=\"utf-8, errors=\"strict\")`\n\nPython3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode() 方法来解码给定的 bytes 对象，这个 bytes 对象可以由 str.encode() 来编码返回。\n\n```python\nstrEx = 'hello'\nstrExBytes = strEx.encode()\nprint(strExBytes)\n# b'hello'\nprint(strExBytes.decode())\n# hello\n```\n\n#### 5. `encode(encoding='UTF-8', errors='strict')`\n\n以 encoding 指定的编码格式编码字符串，如果出错默认报一个ValueError 的异常，除非 errors 指定的是'ignore'或者'replace'\n\n#### 6. `endswith(suffix, beg=0, end=len(string))`\n\n检查字符串是否以obj结束，如果beg或者end指定则检查指定的范围内是否以obj结束，如果是，返回True，否则返回False\n\n```python\nstrEx = 'hello'\nprint(strEx.endswith('aa'))\n# False\nprint(strEx.endswith('llo'))\n# True\n```\n\n#### 7. `expandtabs(tabsize=8)`\n\n把字符串string中的tab符号转为空格，tab符号默认的空格数是8\n\n#### 8.* `find(str, beg=0, end=len(string))`\n\n检测str是否包含在字符串中，如果指定范围beg和end，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1\n\n```python\nstrEx = 'hello'\nprint(strEx.find('e'))\n# 1\nprint(strEx.find('a'))\n# -1\n```\n\n#### 9. `index(str, beg=0, end=len(string))`\n\n跟find()方法一样，只不过如果str不在字符串中会报一个异常\n\n#### 10. `isalnum()`\n\n如果字符串至少有一个字符并且所有字符都是字母或数字则返回True，否则返回False\n\n```python\nstrEx = 'hello123'\nprint(strEx.isalnum())\n# True\n\nstrEx = 'hello 123'\nprint(strEx.isalnum())\n# False\n```\n\n#### 11. `isalpha()`\n\n如果字符串至少有一个字符并且所有字符都是字母或中文字则返回 True, 否则返回 False\n\n```python\nstrEx = 'hello123'\nprint(strEx.isalpha())\n# False\n\nstrEx = '中文hello'\nprint(strEx.isalpha())\n# True\n```\n\n#### 12. `isdigit()`\n\n如果字符串只包含数字则返回True，否则返回False\n\n```python\nstrEx = 'hello123'\nprint(strEx.isdigit())\n# False\n\nstrEx = '12345'\nprint(strEx.isdigit())\n# True\n```\n\n#### 13.* `islower()`\n\n如果字符串中包含至少一个区分大小写的字符，并且所有这些（区分大小写）字符都是小写，则返回True，否则返回False\n\n如果都是数字，返回的是False\n\n```python\nstrEx = '123'\nprint(strEx.islower())\n# False\n\nstrEx = 'Hello'\nprint(strEx.islower())\n# False\n\nstrEx = 'hello123'\nprint(strEx.islower())\n# True\n```\n\n#### 14.* `isnumeric()`\n\n如果字符串只包含数字字符，则返回True，否则返回False\n\n#### 15. `isspace()`\n\n如果字符串中只包含空白，则返回True，否则返回False\n\n> 如果是空字符串，返回的False\n\n#### 16. `istitle()`\n\n如果字符串是标题化的(见 title())则返回 True，否则返回 False\n\n```python\n#eg1:\nstrEx = 'hello'\nstrEx = strEx.title() # 标题化\nprint(strEx)\n# Hello\nprint(strEx.istitle())\n# True\n\n#eg2\nstrEx = 'hello'\nprint(strEx.capitalize().istitle())\n# True\n```\n\n#### 17. `isupper()`\n\n如果字符串中包含至少一个区分大小写的字符，并且所有这些（区分大小写）字符都是大写，则返回True，否则返回False\n\n```python\nstrEx = 'Hello'\nprint(strEx.isupper())\n# False\n\nstrEx = 'HELLO'\nprint(strEx.isupper())\n# True\n```\n\n#### 18. `join(seq)`\n\n以指定字符串作为分隔符，将seq中所有的元素（的字符串表示）合并为一个新的字符串\n\n```python\nstrEx = ','\nprint(strEx.join('abc'))\n# a,b,c\n```\n\n#### 19.* `len(string)`\n\n返回字符串长度\n\n```python\nprint(len('abc'))\n# 3\n```\n\n#### 20. `ljust(width[, fillchar])`\n\n返回一个原字符串左对齐，并使用fillchar填充至长度width的新字符串，fillchar默认为空格\n\n```python\nstrEx = 'abc'\nprint(strEx.ljust(10, '-'))\n# abc-------\n```\n\n#### 21.* `lower()`\n\n转换字符串中所有的大写字符为小写\n\n```python\nstrEx = 'abCdEF'\nprint(strEx.lower())\n# abcdef\n```\n\n#### 22.* `lstrip()`\n\n截掉字符串左边的空格或指定字符\n\n```python\nstrEx = ' abc'\nprint(strEx.lstrip())\n# abc\n\nstrEx = 'abc'\nprint(strEx.lstrip())\n# bc\n```\n\n#### 23. `maketrans()` `translate()`\n\n```python\nstrEx = 'abc'\nmaket = str.maketrans('ab', '12') # 生成对应关系\nprint(strEx.translate(maket))\n# 12c\n```\n\n#### 24. `max(str)`\n\n返回字符串中str最大的字母\n\n#### 25. `min(str)`\n\n返回字符串中str最小的字母\n\n#### 26. `replace(old, new[, max])`\n\n把将字符串中的old替换成new，如果max指定，则替换不超过max次\n\n```python\nstrEx = '13521282025'\nprint(strEx.replace(strEx[3:7], '*' * 4))\n# 135****2025\n\nprint(strEx.replace('2', '*', 3)) # 只替换了前三个\n# 135*1*8*025\n```\n\n#### 27. `rfind(str, beg=0, end=len(string))`\n\n类似于find()函数，不过是从右边开始查找\n\n#### 28. `rindex(str, beg=0, end=len(string))`\n\n类似于index()，不过是从右边开始\n\n#### 29. `rjust(width, [,fillchar])`\n\n用法同ljust()，   返回一个原字符串右对齐，并使用fillchar(默认空格)填充至长度width的新字符串\n\n#### 30.* `rstript()`\n\n用法同lstript()，  删除字符串末尾的空格\n\n#### 31.* `split(str='', num=string.count(str))`\n\n以str为分隔符截取字符串，如果num有指定值，则仅截取num+1个子字符串\n\n```python\nstrEx = 'a,b,c,d,e'\nprint(strEx.split(','))\n# ['a', 'b', 'c', 'd', 'e']\nprint(strEx.split(',', 3))\n# ['a', 'b', 'c', 'd,e']\n```\n\n#### 32. `splitlines(keepends)`\n\n按照行（'\\r', '\\r\\n', '\\n'）分隔，返回一个包含各行作为元素的列表，如果参数keepends为False，不包含换行符，如果为True，则保留换行符\n\n```python\nstrEx = 'hello\\nmy\\n'\nprint(strEx.splitlines())\n# ['hello', 'my']\n\nprint(strEx.splitlines(True))\n# ['hello\\n', 'my\\n']\n```\n\n#### 33.  `startswith(substr, beg=0, end=len(string))`\n\n检查字符串是否是以指定子字符串substr开头，是则返回True，否则返回False，如果beg和end指定值，则在指定范围内检查\n\n```python\nstrEx = 'hello'\nprint(strEx.startswith('he'))\n# True\n```\n\n#### 34.* `strip(chars)`\n\n在字符串上执行lstrip()和rstript()\n\n#### 35. `swapcase()`\n\n将字符串中大写转换为小写，小写转换为大写\n\n```python\nstrEx = 'Hello'\nprint(strEx.swapcase())\n# hELLO\n```\n\n#### 36. `upper()`\n\n转换字符串中的小写字母为大写\n\n```python\nstrEx = 'Hello'\nprint(strEx.upper())\n# HELLO\n```\n\n#### 37. `zfill(width)`\n\n返回长度为width的字符串，原字符串右对齐，前面填充0\n\n```python\nstrEx = 'hello'\nprint(strEx.zfill(10))\n# 00000hello\n```\n\n#### 38. `isdecimal()`\n\n检查字符串是否只包含十进制字符，如果是返回True，否则返回False\n\n```python\nstrEx = 'hello'\nprint(strEx.isdecimal())\n# False\n\nstrEx = '100'\nprint(strEx.isdecimal())\n# True\n```\n\n","source":"_posts/python/04-数据类型-字符串详细.md","raw":"---\ntitle: Python--数据类型总览--字符串详情\ndate: 2021-04-29 10:51:22\ntags: Python\ncategories: Python\ndescription: 数据类型总览--字符串详情\n---\n\n### 1、字符串运算符\n\n`a = Hello` `b = Python`\n\n| 操作符 | 描述                                                         | 实例                          |\n| ------ | ------------------------------------------------------------ | ----------------------------- |\n| +      | 字符串连接                                                   | a + b <br />输出：HelloPython |\n| *      | 重复输出字符                                                 | a*2 <br />输出：HelloHello    |\n| []     | 通过索引输出字符串                                           | a[1]<br />输出：e             |\n| [:]    | 截取字符串中的一部分，遵循 **左闭右开** 原则，str[0:2]是不包含第3个字符的 | a[1:4]<br />输出：ell         |\n| in     | 成员运算符--如果字符串中包含给定字符就返回True               | 'H' in a<br />输出：True      |\n| not in | 成员运算符--如果字符串中不包含给定的字符返货True             | 'M' not in a<br />输出：True  |\n| r/R    | 原始字符串                                                   | print(r'\\a') <br />输出：\\a   |\n| %      | 格式字符串                                                   | 配合格式化符号使用            |\n<!-- more -->\n### 2、字符串格式化\n\n`print(\"i am %s\" % \"jack\")`\n\n| 符号 | 描述                                       |\n| ---- | ------------------------------------------ |\n| %c   | 格式化字符及其ASCII码                      |\n| %s   | 格式化字符串                               |\n| %d   | 格式化整数                                 |\n| %u   | 格式化无符号整数                           |\n| %o   | 格式化无符号八进制数                       |\n| %x   | 格式化无符号十六进制数                     |\n| %X   | 格式化无符号十六进制数（大写）             |\n| %f   | 格式化浮点数字，可指定小数点后的精度[%.2f] |\n| %e   | 用科学技术法格式化浮点数                   |\n| %E   | 作用同%e                                   |\n| %g   | %f和%e的简写                               |\n| %G   | %f和%E的简写                               |\n| %p   | 用十六进制数格式化变量的地址               |\n\n### 3、字符串内建函数\n\n#### 1.* `capitalize()`\n\n将字符串的第一个字符转换为大写\n\n```python\nstrEx = 'hello'\nprint(strEx.capitalize())\n# Hello\n```\n\n#### 2. `center(width, fillchar)`\n\n返回一个指定的宽度width居中的字符串，fillchar为填充的字符，默认为空格\n\n```python\nstrEx = 'hello'\nprint(strEx.center(10, '-'))\n# --hello---\n```\n\n#### 3.* `count(str, beg=0, end=len(string))`\n\n返回str在string里面出现的次数，如果beg[闭区间]或者end指定则返回指定范围内str出现的次数\n\n```python\nstrEx = 'hello'\nprint(strEx.count('l'))\n# 2\n\nprint(strEx.count('l', 3))\n# 1\n```\n\n#### 4. `bytes.decode(encoding=\"utf-8, errors=\"strict\")`\n\nPython3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode() 方法来解码给定的 bytes 对象，这个 bytes 对象可以由 str.encode() 来编码返回。\n\n```python\nstrEx = 'hello'\nstrExBytes = strEx.encode()\nprint(strExBytes)\n# b'hello'\nprint(strExBytes.decode())\n# hello\n```\n\n#### 5. `encode(encoding='UTF-8', errors='strict')`\n\n以 encoding 指定的编码格式编码字符串，如果出错默认报一个ValueError 的异常，除非 errors 指定的是'ignore'或者'replace'\n\n#### 6. `endswith(suffix, beg=0, end=len(string))`\n\n检查字符串是否以obj结束，如果beg或者end指定则检查指定的范围内是否以obj结束，如果是，返回True，否则返回False\n\n```python\nstrEx = 'hello'\nprint(strEx.endswith('aa'))\n# False\nprint(strEx.endswith('llo'))\n# True\n```\n\n#### 7. `expandtabs(tabsize=8)`\n\n把字符串string中的tab符号转为空格，tab符号默认的空格数是8\n\n#### 8.* `find(str, beg=0, end=len(string))`\n\n检测str是否包含在字符串中，如果指定范围beg和end，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1\n\n```python\nstrEx = 'hello'\nprint(strEx.find('e'))\n# 1\nprint(strEx.find('a'))\n# -1\n```\n\n#### 9. `index(str, beg=0, end=len(string))`\n\n跟find()方法一样，只不过如果str不在字符串中会报一个异常\n\n#### 10. `isalnum()`\n\n如果字符串至少有一个字符并且所有字符都是字母或数字则返回True，否则返回False\n\n```python\nstrEx = 'hello123'\nprint(strEx.isalnum())\n# True\n\nstrEx = 'hello 123'\nprint(strEx.isalnum())\n# False\n```\n\n#### 11. `isalpha()`\n\n如果字符串至少有一个字符并且所有字符都是字母或中文字则返回 True, 否则返回 False\n\n```python\nstrEx = 'hello123'\nprint(strEx.isalpha())\n# False\n\nstrEx = '中文hello'\nprint(strEx.isalpha())\n# True\n```\n\n#### 12. `isdigit()`\n\n如果字符串只包含数字则返回True，否则返回False\n\n```python\nstrEx = 'hello123'\nprint(strEx.isdigit())\n# False\n\nstrEx = '12345'\nprint(strEx.isdigit())\n# True\n```\n\n#### 13.* `islower()`\n\n如果字符串中包含至少一个区分大小写的字符，并且所有这些（区分大小写）字符都是小写，则返回True，否则返回False\n\n如果都是数字，返回的是False\n\n```python\nstrEx = '123'\nprint(strEx.islower())\n# False\n\nstrEx = 'Hello'\nprint(strEx.islower())\n# False\n\nstrEx = 'hello123'\nprint(strEx.islower())\n# True\n```\n\n#### 14.* `isnumeric()`\n\n如果字符串只包含数字字符，则返回True，否则返回False\n\n#### 15. `isspace()`\n\n如果字符串中只包含空白，则返回True，否则返回False\n\n> 如果是空字符串，返回的False\n\n#### 16. `istitle()`\n\n如果字符串是标题化的(见 title())则返回 True，否则返回 False\n\n```python\n#eg1:\nstrEx = 'hello'\nstrEx = strEx.title() # 标题化\nprint(strEx)\n# Hello\nprint(strEx.istitle())\n# True\n\n#eg2\nstrEx = 'hello'\nprint(strEx.capitalize().istitle())\n# True\n```\n\n#### 17. `isupper()`\n\n如果字符串中包含至少一个区分大小写的字符，并且所有这些（区分大小写）字符都是大写，则返回True，否则返回False\n\n```python\nstrEx = 'Hello'\nprint(strEx.isupper())\n# False\n\nstrEx = 'HELLO'\nprint(strEx.isupper())\n# True\n```\n\n#### 18. `join(seq)`\n\n以指定字符串作为分隔符，将seq中所有的元素（的字符串表示）合并为一个新的字符串\n\n```python\nstrEx = ','\nprint(strEx.join('abc'))\n# a,b,c\n```\n\n#### 19.* `len(string)`\n\n返回字符串长度\n\n```python\nprint(len('abc'))\n# 3\n```\n\n#### 20. `ljust(width[, fillchar])`\n\n返回一个原字符串左对齐，并使用fillchar填充至长度width的新字符串，fillchar默认为空格\n\n```python\nstrEx = 'abc'\nprint(strEx.ljust(10, '-'))\n# abc-------\n```\n\n#### 21.* `lower()`\n\n转换字符串中所有的大写字符为小写\n\n```python\nstrEx = 'abCdEF'\nprint(strEx.lower())\n# abcdef\n```\n\n#### 22.* `lstrip()`\n\n截掉字符串左边的空格或指定字符\n\n```python\nstrEx = ' abc'\nprint(strEx.lstrip())\n# abc\n\nstrEx = 'abc'\nprint(strEx.lstrip())\n# bc\n```\n\n#### 23. `maketrans()` `translate()`\n\n```python\nstrEx = 'abc'\nmaket = str.maketrans('ab', '12') # 生成对应关系\nprint(strEx.translate(maket))\n# 12c\n```\n\n#### 24. `max(str)`\n\n返回字符串中str最大的字母\n\n#### 25. `min(str)`\n\n返回字符串中str最小的字母\n\n#### 26. `replace(old, new[, max])`\n\n把将字符串中的old替换成new，如果max指定，则替换不超过max次\n\n```python\nstrEx = '13521282025'\nprint(strEx.replace(strEx[3:7], '*' * 4))\n# 135****2025\n\nprint(strEx.replace('2', '*', 3)) # 只替换了前三个\n# 135*1*8*025\n```\n\n#### 27. `rfind(str, beg=0, end=len(string))`\n\n类似于find()函数，不过是从右边开始查找\n\n#### 28. `rindex(str, beg=0, end=len(string))`\n\n类似于index()，不过是从右边开始\n\n#### 29. `rjust(width, [,fillchar])`\n\n用法同ljust()，   返回一个原字符串右对齐，并使用fillchar(默认空格)填充至长度width的新字符串\n\n#### 30.* `rstript()`\n\n用法同lstript()，  删除字符串末尾的空格\n\n#### 31.* `split(str='', num=string.count(str))`\n\n以str为分隔符截取字符串，如果num有指定值，则仅截取num+1个子字符串\n\n```python\nstrEx = 'a,b,c,d,e'\nprint(strEx.split(','))\n# ['a', 'b', 'c', 'd', 'e']\nprint(strEx.split(',', 3))\n# ['a', 'b', 'c', 'd,e']\n```\n\n#### 32. `splitlines(keepends)`\n\n按照行（'\\r', '\\r\\n', '\\n'）分隔，返回一个包含各行作为元素的列表，如果参数keepends为False，不包含换行符，如果为True，则保留换行符\n\n```python\nstrEx = 'hello\\nmy\\n'\nprint(strEx.splitlines())\n# ['hello', 'my']\n\nprint(strEx.splitlines(True))\n# ['hello\\n', 'my\\n']\n```\n\n#### 33.  `startswith(substr, beg=0, end=len(string))`\n\n检查字符串是否是以指定子字符串substr开头，是则返回True，否则返回False，如果beg和end指定值，则在指定范围内检查\n\n```python\nstrEx = 'hello'\nprint(strEx.startswith('he'))\n# True\n```\n\n#### 34.* `strip(chars)`\n\n在字符串上执行lstrip()和rstript()\n\n#### 35. `swapcase()`\n\n将字符串中大写转换为小写，小写转换为大写\n\n```python\nstrEx = 'Hello'\nprint(strEx.swapcase())\n# hELLO\n```\n\n#### 36. `upper()`\n\n转换字符串中的小写字母为大写\n\n```python\nstrEx = 'Hello'\nprint(strEx.upper())\n# HELLO\n```\n\n#### 37. `zfill(width)`\n\n返回长度为width的字符串，原字符串右对齐，前面填充0\n\n```python\nstrEx = 'hello'\nprint(strEx.zfill(10))\n# 00000hello\n```\n\n#### 38. `isdecimal()`\n\n检查字符串是否只包含十进制字符，如果是返回True，否则返回False\n\n```python\nstrEx = 'hello'\nprint(strEx.isdecimal())\n# False\n\nstrEx = '100'\nprint(strEx.isdecimal())\n# True\n```\n\n","slug":"python/04-数据类型-字符串详细","published":1,"updated":"2021-04-29T08:48:39.085Z","_id":"cko3q9ikr00098u09arlf4u8v","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1、字符串运算符\"><a href=\"#1、字符串运算符\" class=\"headerlink\" title=\"1、字符串运算符\"></a>1、字符串运算符</h3><p><code>a = Hello</code> <code>b = Python</code></p>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>描述</th>\n<th>实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+</td>\n<td>字符串连接</td>\n<td>a + b <br />输出：HelloPython</td>\n</tr>\n<tr>\n<td>*</td>\n<td>重复输出字符</td>\n<td>a*2 <br />输出：HelloHello</td>\n</tr>\n<tr>\n<td>[]</td>\n<td>通过索引输出字符串</td>\n<td>a[1]<br />输出：e</td>\n</tr>\n<tr>\n<td>[:]</td>\n<td>截取字符串中的一部分，遵循 <strong>左闭右开</strong> 原则，str[0:2]是不包含第3个字符的</td>\n<td>a[1:4]<br />输出：ell</td>\n</tr>\n<tr>\n<td>in</td>\n<td>成员运算符–如果字符串中包含给定字符就返回True</td>\n<td>‘H’ in a<br />输出：True</td>\n</tr>\n<tr>\n<td>not in</td>\n<td>成员运算符–如果字符串中不包含给定的字符返货True</td>\n<td>‘M’ not in a<br />输出：True</td>\n</tr>\n<tr>\n<td>r/R</td>\n<td>原始字符串</td>\n<td>print(r’\\a’) <br />输出：\\a</td>\n</tr>\n<tr>\n<td>%</td>\n<td>格式字符串</td>\n<td>配合格式化符号使用</td>\n</tr>\n</tbody></table>\n<span id=\"more\"></span>\n<h3 id=\"2、字符串格式化\"><a href=\"#2、字符串格式化\" class=\"headerlink\" title=\"2、字符串格式化\"></a>2、字符串格式化</h3><p><code>print(&quot;i am %s&quot; % &quot;jack&quot;)</code></p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%c</td>\n<td>格式化字符及其ASCII码</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>格式化字符串</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>格式化整数</td>\n</tr>\n<tr>\n<td>%u</td>\n<td>格式化无符号整数</td>\n</tr>\n<tr>\n<td>%o</td>\n<td>格式化无符号八进制数</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>格式化无符号十六进制数</td>\n</tr>\n<tr>\n<td>%X</td>\n<td>格式化无符号十六进制数（大写）</td>\n</tr>\n<tr>\n<td>%f</td>\n<td>格式化浮点数字，可指定小数点后的精度[%.2f]</td>\n</tr>\n<tr>\n<td>%e</td>\n<td>用科学技术法格式化浮点数</td>\n</tr>\n<tr>\n<td>%E</td>\n<td>作用同%e</td>\n</tr>\n<tr>\n<td>%g</td>\n<td>%f和%e的简写</td>\n</tr>\n<tr>\n<td>%G</td>\n<td>%f和%E的简写</td>\n</tr>\n<tr>\n<td>%p</td>\n<td>用十六进制数格式化变量的地址</td>\n</tr>\n</tbody></table>\n<h3 id=\"3、字符串内建函数\"><a href=\"#3、字符串内建函数\" class=\"headerlink\" title=\"3、字符串内建函数\"></a>3、字符串内建函数</h3><h4 id=\"1-capitalize\"><a href=\"#1-capitalize\" class=\"headerlink\" title=\"1.* capitalize()\"></a>1.* <code>capitalize()</code></h4><p>将字符串的第一个字符转换为大写</p>\n<pre class=\" language-python\"><code class=\"language-python\">strEx <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>capitalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># Hello</span>\n</code></pre>\n<h4 id=\"2-center-width-fillchar\"><a href=\"#2-center-width-fillchar\" class=\"headerlink\" title=\"2. center(width, fillchar)\"></a>2. <code>center(width, fillchar)</code></h4><p>返回一个指定的宽度width居中的字符串，fillchar为填充的字符，默认为空格</p>\n<pre class=\" language-python\"><code class=\"language-python\">strEx <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># --hello---</span>\n</code></pre>\n<h4 id=\"3-count-str-beg-0-end-len-string\"><a href=\"#3-count-str-beg-0-end-len-string\" class=\"headerlink\" title=\"3.* count(str, beg=0, end=len(string))\"></a>3.* <code>count(str, beg=0, end=len(string))</code></h4><p>返回str在string里面出现的次数，如果beg[闭区间]或者end指定则返回指定范围内str出现的次数</p>\n<pre class=\" language-python\"><code class=\"language-python\">strEx <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 2</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 1</span>\n</code></pre>\n<h4 id=\"4-bytes-decode-encoding-quot-utf-8-errors-quot-strict-quot\"><a href=\"#4-bytes-decode-encoding-quot-utf-8-errors-quot-strict-quot\" class=\"headerlink\" title=\"4. bytes.decode(encoding=&quot;utf-8, errors=&quot;strict&quot;)\"></a>4. <code>bytes.decode(encoding=&quot;utf-8, errors=&quot;strict&quot;)</code></h4><p>Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode() 方法来解码给定的 bytes 对象，这个 bytes 对象可以由 str.encode() 来编码返回。</p>\n<pre class=\" language-python\"><code class=\"language-python\">strEx <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\nstrExBytes <span class=\"token operator\">=</span> strEx<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strExBytes<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># b'hello'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strExBytes<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># hello</span>\n</code></pre>\n<h4 id=\"5-encode-encoding-39-UTF-8-39-errors-39-strict-39\"><a href=\"#5-encode-encoding-39-UTF-8-39-errors-39-strict-39\" class=\"headerlink\" title=\"5. encode(encoding=&#39;UTF-8&#39;, errors=&#39;strict&#39;)\"></a>5. <code>encode(encoding=&#39;UTF-8&#39;, errors=&#39;strict&#39;)</code></h4><p>以 encoding 指定的编码格式编码字符串，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</p>\n<h4 id=\"6-endswith-suffix-beg-0-end-len-string\"><a href=\"#6-endswith-suffix-beg-0-end-len-string\" class=\"headerlink\" title=\"6. endswith(suffix, beg=0, end=len(string))\"></a>6. <code>endswith(suffix, beg=0, end=len(string))</code></h4><p>检查字符串是否以obj结束，如果beg或者end指定则检查指定的范围内是否以obj结束，如果是，返回True，否则返回False</p>\n<pre class=\" language-python\"><code class=\"language-python\">strEx <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'aa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># False</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'llo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># True</span>\n</code></pre>\n<h4 id=\"7-expandtabs-tabsize-8\"><a href=\"#7-expandtabs-tabsize-8\" class=\"headerlink\" title=\"7. expandtabs(tabsize=8)\"></a>7. <code>expandtabs(tabsize=8)</code></h4><p>把字符串string中的tab符号转为空格，tab符号默认的空格数是8</p>\n<h4 id=\"8-find-str-beg-0-end-len-string\"><a href=\"#8-find-str-beg-0-end-len-string\" class=\"headerlink\" title=\"8.* find(str, beg=0, end=len(string))\"></a>8.* <code>find(str, beg=0, end=len(string))</code></h4><p>检测str是否包含在字符串中，如果指定范围beg和end，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1</p>\n<pre class=\" language-python\"><code class=\"language-python\">strEx <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 1</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># -1</span>\n</code></pre>\n<h4 id=\"9-index-str-beg-0-end-len-string\"><a href=\"#9-index-str-beg-0-end-len-string\" class=\"headerlink\" title=\"9. index(str, beg=0, end=len(string))\"></a>9. <code>index(str, beg=0, end=len(string))</code></h4><p>跟find()方法一样，只不过如果str不在字符串中会报一个异常</p>\n<h4 id=\"10-isalnum\"><a href=\"#10-isalnum\" class=\"headerlink\" title=\"10. isalnum()\"></a>10. <code>isalnum()</code></h4><p>如果字符串至少有一个字符并且所有字符都是字母或数字则返回True，否则返回False</p>\n<pre class=\" language-python\"><code class=\"language-python\">strEx <span class=\"token operator\">=</span> <span class=\"token string\">'hello123'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>isalnum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># True</span>\n\nstrEx <span class=\"token operator\">=</span> <span class=\"token string\">'hello 123'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>isalnum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># False</span>\n</code></pre>\n<h4 id=\"11-isalpha\"><a href=\"#11-isalpha\" class=\"headerlink\" title=\"11. isalpha()\"></a>11. <code>isalpha()</code></h4><p>如果字符串至少有一个字符并且所有字符都是字母或中文字则返回 True, 否则返回 False</p>\n<pre class=\" language-python\"><code class=\"language-python\">strEx <span class=\"token operator\">=</span> <span class=\"token string\">'hello123'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>isalpha<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># False</span>\n\nstrEx <span class=\"token operator\">=</span> <span class=\"token string\">'中文hello'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>isalpha<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># True</span>\n</code></pre>\n<h4 id=\"12-isdigit\"><a href=\"#12-isdigit\" class=\"headerlink\" title=\"12. isdigit()\"></a>12. <code>isdigit()</code></h4><p>如果字符串只包含数字则返回True，否则返回False</p>\n<pre class=\" language-python\"><code class=\"language-python\">strEx <span class=\"token operator\">=</span> <span class=\"token string\">'hello123'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># False</span>\n\nstrEx <span class=\"token operator\">=</span> <span class=\"token string\">'12345'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># True</span>\n</code></pre>\n<h4 id=\"13-islower\"><a href=\"#13-islower\" class=\"headerlink\" title=\"13.* islower()\"></a>13.* <code>islower()</code></h4><p>如果字符串中包含至少一个区分大小写的字符，并且所有这些（区分大小写）字符都是小写，则返回True，否则返回False</p>\n<p>如果都是数字，返回的是False</p>\n<pre class=\" language-python\"><code class=\"language-python\">strEx <span class=\"token operator\">=</span> <span class=\"token string\">'123'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>islower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># False</span>\n\nstrEx <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>islower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># False</span>\n\nstrEx <span class=\"token operator\">=</span> <span class=\"token string\">'hello123'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>islower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># True</span>\n</code></pre>\n<h4 id=\"14-isnumeric\"><a href=\"#14-isnumeric\" class=\"headerlink\" title=\"14.* isnumeric()\"></a>14.* <code>isnumeric()</code></h4><p>如果字符串只包含数字字符，则返回True，否则返回False</p>\n<h4 id=\"15-isspace\"><a href=\"#15-isspace\" class=\"headerlink\" title=\"15. isspace()\"></a>15. <code>isspace()</code></h4><p>如果字符串中只包含空白，则返回True，否则返回False</p>\n<blockquote>\n<p>如果是空字符串，返回的False</p>\n</blockquote>\n<h4 id=\"16-istitle\"><a href=\"#16-istitle\" class=\"headerlink\" title=\"16. istitle()\"></a>16. <code>istitle()</code></h4><p>如果字符串是标题化的(见 title())则返回 True，否则返回 False</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#eg1:</span>\nstrEx <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\nstrEx <span class=\"token operator\">=</span> strEx<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 标题化</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># Hello</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>istitle<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># True</span>\n\n<span class=\"token comment\" spellcheck=\"true\">#eg2</span>\nstrEx <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>capitalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>istitle<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># True</span>\n</code></pre>\n<h4 id=\"17-isupper\"><a href=\"#17-isupper\" class=\"headerlink\" title=\"17. isupper()\"></a>17. <code>isupper()</code></h4><p>如果字符串中包含至少一个区分大小写的字符，并且所有这些（区分大小写）字符都是大写，则返回True，否则返回False</p>\n<pre class=\" language-python\"><code class=\"language-python\">strEx <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>isupper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># False</span>\n\nstrEx <span class=\"token operator\">=</span> <span class=\"token string\">'HELLO'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>isupper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># True</span>\n</code></pre>\n<h4 id=\"18-join-seq\"><a href=\"#18-join-seq\" class=\"headerlink\" title=\"18. join(seq)\"></a>18. <code>join(seq)</code></h4><p>以指定字符串作为分隔符，将seq中所有的元素（的字符串表示）合并为一个新的字符串</p>\n<pre class=\" language-python\"><code class=\"language-python\">strEx <span class=\"token operator\">=</span> <span class=\"token string\">','</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># a,b,c</span>\n</code></pre>\n<h4 id=\"19-len-string\"><a href=\"#19-len-string\" class=\"headerlink\" title=\"19.* len(string)\"></a>19.* <code>len(string)</code></h4><p>返回字符串长度</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 3</span>\n</code></pre>\n<h4 id=\"20-ljust-width-fillchar\"><a href=\"#20-ljust-width-fillchar\" class=\"headerlink\" title=\"20. ljust(width[, fillchar])\"></a>20. <code>ljust(width[, fillchar])</code></h4><p>返回一个原字符串左对齐，并使用fillchar填充至长度width的新字符串，fillchar默认为空格</p>\n<pre class=\" language-python\"><code class=\"language-python\">strEx <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># abc-------</span>\n</code></pre>\n<h4 id=\"21-lower\"><a href=\"#21-lower\" class=\"headerlink\" title=\"21.* lower()\"></a>21.* <code>lower()</code></h4><p>转换字符串中所有的大写字符为小写</p>\n<pre class=\" language-python\"><code class=\"language-python\">strEx <span class=\"token operator\">=</span> <span class=\"token string\">'abCdEF'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># abcdef</span>\n</code></pre>\n<h4 id=\"22-lstrip\"><a href=\"#22-lstrip\" class=\"headerlink\" title=\"22.* lstrip()\"></a>22.* <code>lstrip()</code></h4><p>截掉字符串左边的空格或指定字符</p>\n<pre class=\" language-python\"><code class=\"language-python\">strEx <span class=\"token operator\">=</span> <span class=\"token string\">' abc'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>lstrip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># abc</span>\n\nstrEx <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>lstrip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># bc</span>\n</code></pre>\n<h4 id=\"23-maketrans-translate\"><a href=\"#23-maketrans-translate\" class=\"headerlink\" title=\"23. maketrans() translate()\"></a>23. <code>maketrans()</code> <code>translate()</code></h4><pre class=\" language-python\"><code class=\"language-python\">strEx <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span>\nmaket <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span>maketrans<span class=\"token punctuation\">(</span><span class=\"token string\">'ab'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'12'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 生成对应关系</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>translate<span class=\"token punctuation\">(</span>maket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 12c</span>\n</code></pre>\n<h4 id=\"24-max-str\"><a href=\"#24-max-str\" class=\"headerlink\" title=\"24. max(str)\"></a>24. <code>max(str)</code></h4><p>返回字符串中str最大的字母</p>\n<h4 id=\"25-min-str\"><a href=\"#25-min-str\" class=\"headerlink\" title=\"25. min(str)\"></a>25. <code>min(str)</code></h4><p>返回字符串中str最小的字母</p>\n<h4 id=\"26-replace-old-new-max\"><a href=\"#26-replace-old-new-max\" class=\"headerlink\" title=\"26. replace(old, new[, max])\"></a>26. <code>replace(old, new[, max])</code></h4><p>把将字符串中的old替换成new，如果max指定，则替换不超过max次</p>\n<pre class=\" language-python\"><code class=\"language-python\">strEx <span class=\"token operator\">=</span> <span class=\"token string\">'13521282025'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 135****2025</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 只替换了前三个</span>\n<span class=\"token comment\" spellcheck=\"true\"># 135*1*8*025</span>\n</code></pre>\n<h4 id=\"27-rfind-str-beg-0-end-len-string\"><a href=\"#27-rfind-str-beg-0-end-len-string\" class=\"headerlink\" title=\"27. rfind(str, beg=0, end=len(string))\"></a>27. <code>rfind(str, beg=0, end=len(string))</code></h4><p>类似于find()函数，不过是从右边开始查找</p>\n<h4 id=\"28-rindex-str-beg-0-end-len-string\"><a href=\"#28-rindex-str-beg-0-end-len-string\" class=\"headerlink\" title=\"28. rindex(str, beg=0, end=len(string))\"></a>28. <code>rindex(str, beg=0, end=len(string))</code></h4><p>类似于index()，不过是从右边开始</p>\n<h4 id=\"29-rjust-width-fillchar\"><a href=\"#29-rjust-width-fillchar\" class=\"headerlink\" title=\"29. rjust(width, [,fillchar])\"></a>29. <code>rjust(width, [,fillchar])</code></h4><p>用法同ljust()，   返回一个原字符串右对齐，并使用fillchar(默认空格)填充至长度width的新字符串</p>\n<h4 id=\"30-rstript\"><a href=\"#30-rstript\" class=\"headerlink\" title=\"30.* rstript()\"></a>30.* <code>rstript()</code></h4><p>用法同lstript()，  删除字符串末尾的空格</p>\n<h4 id=\"31-split-str-39-39-num-string-count-str\"><a href=\"#31-split-str-39-39-num-string-count-str\" class=\"headerlink\" title=\"31.* split(str=&#39;&#39;, num=string.count(str))\"></a>31.* <code>split(str=&#39;&#39;, num=string.count(str))</code></h4><p>以str为分隔符截取字符串，如果num有指定值，则仅截取num+1个子字符串</p>\n<pre class=\" language-python\"><code class=\"language-python\">strEx <span class=\"token operator\">=</span> <span class=\"token string\">'a,b,c,d,e'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># ['a', 'b', 'c', 'd', 'e']</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># ['a', 'b', 'c', 'd,e']</span>\n</code></pre>\n<h4 id=\"32-splitlines-keepends\"><a href=\"#32-splitlines-keepends\" class=\"headerlink\" title=\"32. splitlines(keepends)\"></a>32. <code>splitlines(keepends)</code></h4><p>按照行（’\\r’, ‘\\r\\n’, ‘\\n’）分隔，返回一个包含各行作为元素的列表，如果参数keepends为False，不包含换行符，如果为True，则保留换行符</p>\n<pre class=\" language-python\"><code class=\"language-python\">strEx <span class=\"token operator\">=</span> <span class=\"token string\">'hello\\nmy\\n'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>splitlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># ['hello', 'my']</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>splitlines<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># ['hello\\n', 'my\\n']</span>\n</code></pre>\n<h4 id=\"33-startswith-substr-beg-0-end-len-string\"><a href=\"#33-startswith-substr-beg-0-end-len-string\" class=\"headerlink\" title=\"33.  startswith(substr, beg=0, end=len(string))\"></a>33.  <code>startswith(substr, beg=0, end=len(string))</code></h4><p>检查字符串是否是以指定子字符串substr开头，是则返回True，否则返回False，如果beg和end指定值，则在指定范围内检查</p>\n<pre class=\" language-python\"><code class=\"language-python\">strEx <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'he'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># True</span>\n</code></pre>\n<h4 id=\"34-strip-chars\"><a href=\"#34-strip-chars\" class=\"headerlink\" title=\"34.* strip(chars)\"></a>34.* <code>strip(chars)</code></h4><p>在字符串上执行lstrip()和rstript()</p>\n<h4 id=\"35-swapcase\"><a href=\"#35-swapcase\" class=\"headerlink\" title=\"35. swapcase()\"></a>35. <code>swapcase()</code></h4><p>将字符串中大写转换为小写，小写转换为大写</p>\n<pre class=\" language-python\"><code class=\"language-python\">strEx <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>swapcase<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># hELLO</span>\n</code></pre>\n<h4 id=\"36-upper\"><a href=\"#36-upper\" class=\"headerlink\" title=\"36. upper()\"></a>36. <code>upper()</code></h4><p>转换字符串中的小写字母为大写</p>\n<pre class=\" language-python\"><code class=\"language-python\">strEx <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># HELLO</span>\n</code></pre>\n<h4 id=\"37-zfill-width\"><a href=\"#37-zfill-width\" class=\"headerlink\" title=\"37. zfill(width)\"></a>37. <code>zfill(width)</code></h4><p>返回长度为width的字符串，原字符串右对齐，前面填充0</p>\n<pre class=\" language-python\"><code class=\"language-python\">strEx <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>zfill<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 00000hello</span>\n</code></pre>\n<h4 id=\"38-isdecimal\"><a href=\"#38-isdecimal\" class=\"headerlink\" title=\"38. isdecimal()\"></a>38. <code>isdecimal()</code></h4><p>检查字符串是否只包含十进制字符，如果是返回True，否则返回False</p>\n<pre class=\" language-python\"><code class=\"language-python\">strEx <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>isdecimal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># False</span>\n\nstrEx <span class=\"token operator\">=</span> <span class=\"token string\">'100'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strEx<span class=\"token punctuation\">.</span>isdecimal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># True</span>\n</code></pre>\n","site":{"data":{}},"excerpt":"<h3 id=\"1、字符串运算符\"><a href=\"#1、字符串运算符\" class=\"headerlink\" title=\"1、字符串运算符\"></a>1、字符串运算符</h3><p><code>a = Hello</code> <code>b = Python</code></p>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>描述</th>\n<th>实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+</td>\n<td>字符串连接</td>\n<td>a + b <br />输出：HelloPython</td>\n</tr>\n<tr>\n<td>*</td>\n<td>重复输出字符</td>\n<td>a*2 <br />输出：HelloHello</td>\n</tr>\n<tr>\n<td>[]</td>\n<td>通过索引输出字符串</td>\n<td>a[1]<br />输出：e</td>\n</tr>\n<tr>\n<td>[:]</td>\n<td>截取字符串中的一部分，遵循 <strong>左闭右开</strong> 原则，str[0:2]是不包含第3个字符的</td>\n<td>a[1:4]<br />输出：ell</td>\n</tr>\n<tr>\n<td>in</td>\n<td>成员运算符–如果字符串中包含给定字符就返回True</td>\n<td>‘H’ in a<br />输出：True</td>\n</tr>\n<tr>\n<td>not in</td>\n<td>成员运算符–如果字符串中不包含给定的字符返货True</td>\n<td>‘M’ not in a<br />输出：True</td>\n</tr>\n<tr>\n<td>r/R</td>\n<td>原始字符串</td>\n<td>print(r’\\a’) <br />输出：\\a</td>\n</tr>\n<tr>\n<td>%</td>\n<td>格式字符串</td>\n<td>配合格式化符号使用</td>\n</tr>\n</tbody></table>","more":"<h3 id=\"2、字符串格式化\"><a href=\"#2、字符串格式化\" class=\"headerlink\" title=\"2、字符串格式化\"></a>2、字符串格式化</h3><p><code>print(&quot;i am %s&quot; % &quot;jack&quot;)</code></p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%c</td>\n<td>格式化字符及其ASCII码</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>格式化字符串</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>格式化整数</td>\n</tr>\n<tr>\n<td>%u</td>\n<td>格式化无符号整数</td>\n</tr>\n<tr>\n<td>%o</td>\n<td>格式化无符号八进制数</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>格式化无符号十六进制数</td>\n</tr>\n<tr>\n<td>%X</td>\n<td>格式化无符号十六进制数（大写）</td>\n</tr>\n<tr>\n<td>%f</td>\n<td>格式化浮点数字，可指定小数点后的精度[%.2f]</td>\n</tr>\n<tr>\n<td>%e</td>\n<td>用科学技术法格式化浮点数</td>\n</tr>\n<tr>\n<td>%E</td>\n<td>作用同%e</td>\n</tr>\n<tr>\n<td>%g</td>\n<td>%f和%e的简写</td>\n</tr>\n<tr>\n<td>%G</td>\n<td>%f和%E的简写</td>\n</tr>\n<tr>\n<td>%p</td>\n<td>用十六进制数格式化变量的地址</td>\n</tr>\n</tbody></table>\n<h3 id=\"3、字符串内建函数\"><a href=\"#3、字符串内建函数\" class=\"headerlink\" title=\"3、字符串内建函数\"></a>3、字符串内建函数</h3><h4 id=\"1-capitalize\"><a href=\"#1-capitalize\" class=\"headerlink\" title=\"1.* capitalize()\"></a>1.* <code>capitalize()</code></h4><p>将字符串的第一个字符转换为大写</p>\n<pre><code class=\"python\">strEx = &#39;hello&#39;\nprint(strEx.capitalize())\n# Hello\n</code></pre>\n<h4 id=\"2-center-width-fillchar\"><a href=\"#2-center-width-fillchar\" class=\"headerlink\" title=\"2. center(width, fillchar)\"></a>2. <code>center(width, fillchar)</code></h4><p>返回一个指定的宽度width居中的字符串，fillchar为填充的字符，默认为空格</p>\n<pre><code class=\"python\">strEx = &#39;hello&#39;\nprint(strEx.center(10, &#39;-&#39;))\n# --hello---\n</code></pre>\n<h4 id=\"3-count-str-beg-0-end-len-string\"><a href=\"#3-count-str-beg-0-end-len-string\" class=\"headerlink\" title=\"3.* count(str, beg=0, end=len(string))\"></a>3.* <code>count(str, beg=0, end=len(string))</code></h4><p>返回str在string里面出现的次数，如果beg[闭区间]或者end指定则返回指定范围内str出现的次数</p>\n<pre><code class=\"python\">strEx = &#39;hello&#39;\nprint(strEx.count(&#39;l&#39;))\n# 2\n\nprint(strEx.count(&#39;l&#39;, 3))\n# 1\n</code></pre>\n<h4 id=\"4-bytes-decode-encoding-quot-utf-8-errors-quot-strict-quot\"><a href=\"#4-bytes-decode-encoding-quot-utf-8-errors-quot-strict-quot\" class=\"headerlink\" title=\"4. bytes.decode(encoding=&quot;utf-8, errors=&quot;strict&quot;)\"></a>4. <code>bytes.decode(encoding=&quot;utf-8, errors=&quot;strict&quot;)</code></h4><p>Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode() 方法来解码给定的 bytes 对象，这个 bytes 对象可以由 str.encode() 来编码返回。</p>\n<pre><code class=\"python\">strEx = &#39;hello&#39;\nstrExBytes = strEx.encode()\nprint(strExBytes)\n# b&#39;hello&#39;\nprint(strExBytes.decode())\n# hello\n</code></pre>\n<h4 id=\"5-encode-encoding-39-UTF-8-39-errors-39-strict-39\"><a href=\"#5-encode-encoding-39-UTF-8-39-errors-39-strict-39\" class=\"headerlink\" title=\"5. encode(encoding=&#39;UTF-8&#39;, errors=&#39;strict&#39;)\"></a>5. <code>encode(encoding=&#39;UTF-8&#39;, errors=&#39;strict&#39;)</code></h4><p>以 encoding 指定的编码格式编码字符串，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</p>\n<h4 id=\"6-endswith-suffix-beg-0-end-len-string\"><a href=\"#6-endswith-suffix-beg-0-end-len-string\" class=\"headerlink\" title=\"6. endswith(suffix, beg=0, end=len(string))\"></a>6. <code>endswith(suffix, beg=0, end=len(string))</code></h4><p>检查字符串是否以obj结束，如果beg或者end指定则检查指定的范围内是否以obj结束，如果是，返回True，否则返回False</p>\n<pre><code class=\"python\">strEx = &#39;hello&#39;\nprint(strEx.endswith(&#39;aa&#39;))\n# False\nprint(strEx.endswith(&#39;llo&#39;))\n# True\n</code></pre>\n<h4 id=\"7-expandtabs-tabsize-8\"><a href=\"#7-expandtabs-tabsize-8\" class=\"headerlink\" title=\"7. expandtabs(tabsize=8)\"></a>7. <code>expandtabs(tabsize=8)</code></h4><p>把字符串string中的tab符号转为空格，tab符号默认的空格数是8</p>\n<h4 id=\"8-find-str-beg-0-end-len-string\"><a href=\"#8-find-str-beg-0-end-len-string\" class=\"headerlink\" title=\"8.* find(str, beg=0, end=len(string))\"></a>8.* <code>find(str, beg=0, end=len(string))</code></h4><p>检测str是否包含在字符串中，如果指定范围beg和end，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1</p>\n<pre><code class=\"python\">strEx = &#39;hello&#39;\nprint(strEx.find(&#39;e&#39;))\n# 1\nprint(strEx.find(&#39;a&#39;))\n# -1\n</code></pre>\n<h4 id=\"9-index-str-beg-0-end-len-string\"><a href=\"#9-index-str-beg-0-end-len-string\" class=\"headerlink\" title=\"9. index(str, beg=0, end=len(string))\"></a>9. <code>index(str, beg=0, end=len(string))</code></h4><p>跟find()方法一样，只不过如果str不在字符串中会报一个异常</p>\n<h4 id=\"10-isalnum\"><a href=\"#10-isalnum\" class=\"headerlink\" title=\"10. isalnum()\"></a>10. <code>isalnum()</code></h4><p>如果字符串至少有一个字符并且所有字符都是字母或数字则返回True，否则返回False</p>\n<pre><code class=\"python\">strEx = &#39;hello123&#39;\nprint(strEx.isalnum())\n# True\n\nstrEx = &#39;hello 123&#39;\nprint(strEx.isalnum())\n# False\n</code></pre>\n<h4 id=\"11-isalpha\"><a href=\"#11-isalpha\" class=\"headerlink\" title=\"11. isalpha()\"></a>11. <code>isalpha()</code></h4><p>如果字符串至少有一个字符并且所有字符都是字母或中文字则返回 True, 否则返回 False</p>\n<pre><code class=\"python\">strEx = &#39;hello123&#39;\nprint(strEx.isalpha())\n# False\n\nstrEx = &#39;中文hello&#39;\nprint(strEx.isalpha())\n# True\n</code></pre>\n<h4 id=\"12-isdigit\"><a href=\"#12-isdigit\" class=\"headerlink\" title=\"12. isdigit()\"></a>12. <code>isdigit()</code></h4><p>如果字符串只包含数字则返回True，否则返回False</p>\n<pre><code class=\"python\">strEx = &#39;hello123&#39;\nprint(strEx.isdigit())\n# False\n\nstrEx = &#39;12345&#39;\nprint(strEx.isdigit())\n# True\n</code></pre>\n<h4 id=\"13-islower\"><a href=\"#13-islower\" class=\"headerlink\" title=\"13.* islower()\"></a>13.* <code>islower()</code></h4><p>如果字符串中包含至少一个区分大小写的字符，并且所有这些（区分大小写）字符都是小写，则返回True，否则返回False</p>\n<p>如果都是数字，返回的是False</p>\n<pre><code class=\"python\">strEx = &#39;123&#39;\nprint(strEx.islower())\n# False\n\nstrEx = &#39;Hello&#39;\nprint(strEx.islower())\n# False\n\nstrEx = &#39;hello123&#39;\nprint(strEx.islower())\n# True\n</code></pre>\n<h4 id=\"14-isnumeric\"><a href=\"#14-isnumeric\" class=\"headerlink\" title=\"14.* isnumeric()\"></a>14.* <code>isnumeric()</code></h4><p>如果字符串只包含数字字符，则返回True，否则返回False</p>\n<h4 id=\"15-isspace\"><a href=\"#15-isspace\" class=\"headerlink\" title=\"15. isspace()\"></a>15. <code>isspace()</code></h4><p>如果字符串中只包含空白，则返回True，否则返回False</p>\n<blockquote>\n<p>如果是空字符串，返回的False</p>\n</blockquote>\n<h4 id=\"16-istitle\"><a href=\"#16-istitle\" class=\"headerlink\" title=\"16. istitle()\"></a>16. <code>istitle()</code></h4><p>如果字符串是标题化的(见 title())则返回 True，否则返回 False</p>\n<pre><code class=\"python\">#eg1:\nstrEx = &#39;hello&#39;\nstrEx = strEx.title() # 标题化\nprint(strEx)\n# Hello\nprint(strEx.istitle())\n# True\n\n#eg2\nstrEx = &#39;hello&#39;\nprint(strEx.capitalize().istitle())\n# True\n</code></pre>\n<h4 id=\"17-isupper\"><a href=\"#17-isupper\" class=\"headerlink\" title=\"17. isupper()\"></a>17. <code>isupper()</code></h4><p>如果字符串中包含至少一个区分大小写的字符，并且所有这些（区分大小写）字符都是大写，则返回True，否则返回False</p>\n<pre><code class=\"python\">strEx = &#39;Hello&#39;\nprint(strEx.isupper())\n# False\n\nstrEx = &#39;HELLO&#39;\nprint(strEx.isupper())\n# True\n</code></pre>\n<h4 id=\"18-join-seq\"><a href=\"#18-join-seq\" class=\"headerlink\" title=\"18. join(seq)\"></a>18. <code>join(seq)</code></h4><p>以指定字符串作为分隔符，将seq中所有的元素（的字符串表示）合并为一个新的字符串</p>\n<pre><code class=\"python\">strEx = &#39;,&#39;\nprint(strEx.join(&#39;abc&#39;))\n# a,b,c\n</code></pre>\n<h4 id=\"19-len-string\"><a href=\"#19-len-string\" class=\"headerlink\" title=\"19.* len(string)\"></a>19.* <code>len(string)</code></h4><p>返回字符串长度</p>\n<pre><code class=\"python\">print(len(&#39;abc&#39;))\n# 3\n</code></pre>\n<h4 id=\"20-ljust-width-fillchar\"><a href=\"#20-ljust-width-fillchar\" class=\"headerlink\" title=\"20. ljust(width[, fillchar])\"></a>20. <code>ljust(width[, fillchar])</code></h4><p>返回一个原字符串左对齐，并使用fillchar填充至长度width的新字符串，fillchar默认为空格</p>\n<pre><code class=\"python\">strEx = &#39;abc&#39;\nprint(strEx.ljust(10, &#39;-&#39;))\n# abc-------\n</code></pre>\n<h4 id=\"21-lower\"><a href=\"#21-lower\" class=\"headerlink\" title=\"21.* lower()\"></a>21.* <code>lower()</code></h4><p>转换字符串中所有的大写字符为小写</p>\n<pre><code class=\"python\">strEx = &#39;abCdEF&#39;\nprint(strEx.lower())\n# abcdef\n</code></pre>\n<h4 id=\"22-lstrip\"><a href=\"#22-lstrip\" class=\"headerlink\" title=\"22.* lstrip()\"></a>22.* <code>lstrip()</code></h4><p>截掉字符串左边的空格或指定字符</p>\n<pre><code class=\"python\">strEx = &#39; abc&#39;\nprint(strEx.lstrip())\n# abc\n\nstrEx = &#39;abc&#39;\nprint(strEx.lstrip())\n# bc\n</code></pre>\n<h4 id=\"23-maketrans-translate\"><a href=\"#23-maketrans-translate\" class=\"headerlink\" title=\"23. maketrans() translate()\"></a>23. <code>maketrans()</code> <code>translate()</code></h4><pre><code class=\"python\">strEx = &#39;abc&#39;\nmaket = str.maketrans(&#39;ab&#39;, &#39;12&#39;) # 生成对应关系\nprint(strEx.translate(maket))\n# 12c\n</code></pre>\n<h4 id=\"24-max-str\"><a href=\"#24-max-str\" class=\"headerlink\" title=\"24. max(str)\"></a>24. <code>max(str)</code></h4><p>返回字符串中str最大的字母</p>\n<h4 id=\"25-min-str\"><a href=\"#25-min-str\" class=\"headerlink\" title=\"25. min(str)\"></a>25. <code>min(str)</code></h4><p>返回字符串中str最小的字母</p>\n<h4 id=\"26-replace-old-new-max\"><a href=\"#26-replace-old-new-max\" class=\"headerlink\" title=\"26. replace(old, new[, max])\"></a>26. <code>replace(old, new[, max])</code></h4><p>把将字符串中的old替换成new，如果max指定，则替换不超过max次</p>\n<pre><code class=\"python\">strEx = &#39;13521282025&#39;\nprint(strEx.replace(strEx[3:7], &#39;*&#39; * 4))\n# 135****2025\n\nprint(strEx.replace(&#39;2&#39;, &#39;*&#39;, 3)) # 只替换了前三个\n# 135*1*8*025\n</code></pre>\n<h4 id=\"27-rfind-str-beg-0-end-len-string\"><a href=\"#27-rfind-str-beg-0-end-len-string\" class=\"headerlink\" title=\"27. rfind(str, beg=0, end=len(string))\"></a>27. <code>rfind(str, beg=0, end=len(string))</code></h4><p>类似于find()函数，不过是从右边开始查找</p>\n<h4 id=\"28-rindex-str-beg-0-end-len-string\"><a href=\"#28-rindex-str-beg-0-end-len-string\" class=\"headerlink\" title=\"28. rindex(str, beg=0, end=len(string))\"></a>28. <code>rindex(str, beg=0, end=len(string))</code></h4><p>类似于index()，不过是从右边开始</p>\n<h4 id=\"29-rjust-width-fillchar\"><a href=\"#29-rjust-width-fillchar\" class=\"headerlink\" title=\"29. rjust(width, [,fillchar])\"></a>29. <code>rjust(width, [,fillchar])</code></h4><p>用法同ljust()，   返回一个原字符串右对齐，并使用fillchar(默认空格)填充至长度width的新字符串</p>\n<h4 id=\"30-rstript\"><a href=\"#30-rstript\" class=\"headerlink\" title=\"30.* rstript()\"></a>30.* <code>rstript()</code></h4><p>用法同lstript()，  删除字符串末尾的空格</p>\n<h4 id=\"31-split-str-39-39-num-string-count-str\"><a href=\"#31-split-str-39-39-num-string-count-str\" class=\"headerlink\" title=\"31.* split(str=&#39;&#39;, num=string.count(str))\"></a>31.* <code>split(str=&#39;&#39;, num=string.count(str))</code></h4><p>以str为分隔符截取字符串，如果num有指定值，则仅截取num+1个子字符串</p>\n<pre><code class=\"python\">strEx = &#39;a,b,c,d,e&#39;\nprint(strEx.split(&#39;,&#39;))\n# [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\nprint(strEx.split(&#39;,&#39;, 3))\n# [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d,e&#39;]\n</code></pre>\n<h4 id=\"32-splitlines-keepends\"><a href=\"#32-splitlines-keepends\" class=\"headerlink\" title=\"32. splitlines(keepends)\"></a>32. <code>splitlines(keepends)</code></h4><p>按照行（’\\r’, ‘\\r\\n’, ‘\\n’）分隔，返回一个包含各行作为元素的列表，如果参数keepends为False，不包含换行符，如果为True，则保留换行符</p>\n<pre><code class=\"python\">strEx = &#39;hello\\nmy\\n&#39;\nprint(strEx.splitlines())\n# [&#39;hello&#39;, &#39;my&#39;]\n\nprint(strEx.splitlines(True))\n# [&#39;hello\\n&#39;, &#39;my\\n&#39;]\n</code></pre>\n<h4 id=\"33-startswith-substr-beg-0-end-len-string\"><a href=\"#33-startswith-substr-beg-0-end-len-string\" class=\"headerlink\" title=\"33.  startswith(substr, beg=0, end=len(string))\"></a>33.  <code>startswith(substr, beg=0, end=len(string))</code></h4><p>检查字符串是否是以指定子字符串substr开头，是则返回True，否则返回False，如果beg和end指定值，则在指定范围内检查</p>\n<pre><code class=\"python\">strEx = &#39;hello&#39;\nprint(strEx.startswith(&#39;he&#39;))\n# True\n</code></pre>\n<h4 id=\"34-strip-chars\"><a href=\"#34-strip-chars\" class=\"headerlink\" title=\"34.* strip(chars)\"></a>34.* <code>strip(chars)</code></h4><p>在字符串上执行lstrip()和rstript()</p>\n<h4 id=\"35-swapcase\"><a href=\"#35-swapcase\" class=\"headerlink\" title=\"35. swapcase()\"></a>35. <code>swapcase()</code></h4><p>将字符串中大写转换为小写，小写转换为大写</p>\n<pre><code class=\"python\">strEx = &#39;Hello&#39;\nprint(strEx.swapcase())\n# hELLO\n</code></pre>\n<h4 id=\"36-upper\"><a href=\"#36-upper\" class=\"headerlink\" title=\"36. upper()\"></a>36. <code>upper()</code></h4><p>转换字符串中的小写字母为大写</p>\n<pre><code class=\"python\">strEx = &#39;Hello&#39;\nprint(strEx.upper())\n# HELLO\n</code></pre>\n<h4 id=\"37-zfill-width\"><a href=\"#37-zfill-width\" class=\"headerlink\" title=\"37. zfill(width)\"></a>37. <code>zfill(width)</code></h4><p>返回长度为width的字符串，原字符串右对齐，前面填充0</p>\n<pre><code class=\"python\">strEx = &#39;hello&#39;\nprint(strEx.zfill(10))\n# 00000hello\n</code></pre>\n<h4 id=\"38-isdecimal\"><a href=\"#38-isdecimal\" class=\"headerlink\" title=\"38. isdecimal()\"></a>38. <code>isdecimal()</code></h4><p>检查字符串是否只包含十进制字符，如果是返回True，否则返回False</p>\n<pre><code class=\"python\">strEx = &#39;hello&#39;\nprint(strEx.isdecimal())\n# False\n\nstrEx = &#39;100&#39;\nprint(strEx.isdecimal())\n# True\n</code></pre>"},{"title":"Python--前言","date":"2021-04-24T08:30:52.000Z","description":"了解Python","_content":"\n## 先了解python\n\n### 1、python是一种解释性语言\n\npython也是需要编译的，只不过Python不像java那样需要去强编译「手动编译」，Python在执行时是自动完成编译。\n\n编译的结果是保存于在位于内存中的**PyCodeObject**中，然后通过解释器将PyCodeObject写回到**pyc**文件中。\n\n当Python程序第二次运行时，首先会在硬盘中找pyc文件，如果找到直接载入，没有就执行正常过程。\n\n> 编译型语言C语言，就需要一个编译的过程，把程序转成机器语言。\n\n### 2、pyc文件生成的位置\n\n会在生成在执行文件的同级，生成在默认的目 `__pycache__`下面，如果`import`的文件的名字为`example`，生成的名字格式大概为`example-cpython-39.pyc`。\n\n### 3、pyc文件有效性\n\npython每次载入pyc文件之前会检查下py文件和pyc文件的最后修改日期，如果日期不一致会重新生成一份pyc文件\n\n\n\n## 优缺点\n\n### 1、优点\n\n1、python有许多完善的基础代码库，开发时实用很方便\n\n### 2、缺点\n\n1、代码不能加密，因为Python是解释性语言，源代码是以明文形式存放，如果项目有对代码加密的需求，不要用Python来实现\n\n\n\n#### <!--深入的遇到再补充-->","source":"_posts/python/python.md","raw":"---\ntitle: Python--前言\ndate: 2021-04-24 16:30:52\ntags: Python\ncategories: Python\ndescription: 了解Python\n---\n\n## 先了解python\n\n### 1、python是一种解释性语言\n\npython也是需要编译的，只不过Python不像java那样需要去强编译「手动编译」，Python在执行时是自动完成编译。\n\n编译的结果是保存于在位于内存中的**PyCodeObject**中，然后通过解释器将PyCodeObject写回到**pyc**文件中。\n\n当Python程序第二次运行时，首先会在硬盘中找pyc文件，如果找到直接载入，没有就执行正常过程。\n\n> 编译型语言C语言，就需要一个编译的过程，把程序转成机器语言。\n\n### 2、pyc文件生成的位置\n\n会在生成在执行文件的同级，生成在默认的目 `__pycache__`下面，如果`import`的文件的名字为`example`，生成的名字格式大概为`example-cpython-39.pyc`。\n\n### 3、pyc文件有效性\n\npython每次载入pyc文件之前会检查下py文件和pyc文件的最后修改日期，如果日期不一致会重新生成一份pyc文件\n\n\n\n## 优缺点\n\n### 1、优点\n\n1、python有许多完善的基础代码库，开发时实用很方便\n\n### 2、缺点\n\n1、代码不能加密，因为Python是解释性语言，源代码是以明文形式存放，如果项目有对代码加密的需求，不要用Python来实现\n\n\n\n#### <!--深入的遇到再补充-->","slug":"python/python","published":1,"updated":"2021-04-29T08:46:18.784Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko3qk6ly0000gu098eqz67a1","content":"<h2 id=\"先了解python\"><a href=\"#先了解python\" class=\"headerlink\" title=\"先了解python\"></a>先了解python</h2><h3 id=\"1、python是一种解释性语言\"><a href=\"#1、python是一种解释性语言\" class=\"headerlink\" title=\"1、python是一种解释性语言\"></a>1、python是一种解释性语言</h3><p>python也是需要编译的，只不过Python不像java那样需要去强编译「手动编译」，Python在执行时是自动完成编译。</p>\n<p>编译的结果是保存于在位于内存中的<strong>PyCodeObject</strong>中，然后通过解释器将PyCodeObject写回到<strong>pyc</strong>文件中。</p>\n<p>当Python程序第二次运行时，首先会在硬盘中找pyc文件，如果找到直接载入，没有就执行正常过程。</p>\n<blockquote>\n<p>编译型语言C语言，就需要一个编译的过程，把程序转成机器语言。</p>\n</blockquote>\n<h3 id=\"2、pyc文件生成的位置\"><a href=\"#2、pyc文件生成的位置\" class=\"headerlink\" title=\"2、pyc文件生成的位置\"></a>2、pyc文件生成的位置</h3><p>会在生成在执行文件的同级，生成在默认的目 <code>__pycache__</code>下面，如果<code>import</code>的文件的名字为<code>example</code>，生成的名字格式大概为<code>example-cpython-39.pyc</code>。</p>\n<h3 id=\"3、pyc文件有效性\"><a href=\"#3、pyc文件有效性\" class=\"headerlink\" title=\"3、pyc文件有效性\"></a>3、pyc文件有效性</h3><p>python每次载入pyc文件之前会检查下py文件和pyc文件的最后修改日期，如果日期不一致会重新生成一份pyc文件</p>\n<h2 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h2><h3 id=\"1、优点\"><a href=\"#1、优点\" class=\"headerlink\" title=\"1、优点\"></a>1、优点</h3><p>1、python有许多完善的基础代码库，开发时实用很方便</p>\n<h3 id=\"2、缺点\"><a href=\"#2、缺点\" class=\"headerlink\" title=\"2、缺点\"></a>2、缺点</h3><p>1、代码不能加密，因为Python是解释性语言，源代码是以明文形式存放，如果项目有对代码加密的需求，不要用Python来实现</p>\n<h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><!--深入的遇到再补充--></h4>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"先了解python\"><a href=\"#先了解python\" class=\"headerlink\" title=\"先了解python\"></a>先了解python</h2><h3 id=\"1、python是一种解释性语言\"><a href=\"#1、python是一种解释性语言\" class=\"headerlink\" title=\"1、python是一种解释性语言\"></a>1、python是一种解释性语言</h3><p>python也是需要编译的，只不过Python不像java那样需要去强编译「手动编译」，Python在执行时是自动完成编译。</p>\n<p>编译的结果是保存于在位于内存中的<strong>PyCodeObject</strong>中，然后通过解释器将PyCodeObject写回到<strong>pyc</strong>文件中。</p>\n<p>当Python程序第二次运行时，首先会在硬盘中找pyc文件，如果找到直接载入，没有就执行正常过程。</p>\n<blockquote>\n<p>编译型语言C语言，就需要一个编译的过程，把程序转成机器语言。</p>\n</blockquote>\n<h3 id=\"2、pyc文件生成的位置\"><a href=\"#2、pyc文件生成的位置\" class=\"headerlink\" title=\"2、pyc文件生成的位置\"></a>2、pyc文件生成的位置</h3><p>会在生成在执行文件的同级，生成在默认的目 <code>__pycache__</code>下面，如果<code>import</code>的文件的名字为<code>example</code>，生成的名字格式大概为<code>example-cpython-39.pyc</code>。</p>\n<h3 id=\"3、pyc文件有效性\"><a href=\"#3、pyc文件有效性\" class=\"headerlink\" title=\"3、pyc文件有效性\"></a>3、pyc文件有效性</h3><p>python每次载入pyc文件之前会检查下py文件和pyc文件的最后修改日期，如果日期不一致会重新生成一份pyc文件</p>\n<h2 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h2><h3 id=\"1、优点\"><a href=\"#1、优点\" class=\"headerlink\" title=\"1、优点\"></a>1、优点</h3><p>1、python有许多完善的基础代码库，开发时实用很方便</p>\n<h3 id=\"2、缺点\"><a href=\"#2、缺点\" class=\"headerlink\" title=\"2、缺点\"></a>2、缺点</h3><p>1、代码不能加密，因为Python是解释性语言，源代码是以明文形式存放，如果项目有对代码加密的需求，不要用Python来实现</p>\n<h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><!--深入的遇到再补充--></h4>"}],"PostAsset":[],"PostCategory":[{"post_id":"cko3q9ije00008u094lwf16ax","category_id":"cko2jm0dz0004t009dp4h4sdm","_id":"cko3q9ijm00028u097r2f17nt"},{"post_id":"cko3q9ijm00038u090ucng7d8","category_id":"cko2jm0dz0004t009dp4h4sdm","_id":"cko3q9ijt00078u099lz9d84z"},{"post_id":"cko3q9ijo00048u09fe607a73","category_id":"cko2jm0dz0004t009dp4h4sdm","_id":"cko3q9ijt00088u0989wjfxfm"},{"post_id":"cko3q9ikr00098u09arlf4u8v","category_id":"cko2jm0dz0004t009dp4h4sdm","_id":"cko3q9iks000b8u09ahnc4fpg"},{"post_id":"cko3qk6ly0000gu098eqz67a1","category_id":"cko2jm0dz0004t009dp4h4sdm","_id":"cko3qk6mk0002gu09acdu3rim"}],"PostTag":[{"post_id":"cko3q9ije00008u094lwf16ax","tag_id":"cko2jm0ek0005t0093o5chbj9","_id":"cko3q9ijl00018u095hfabys7"},{"post_id":"cko3q9ijm00038u090ucng7d8","tag_id":"cko2jm0ek0005t0093o5chbj9","_id":"cko3q9ijr00058u099d5g17t8"},{"post_id":"cko3q9ijo00048u09fe607a73","tag_id":"cko2jm0ek0005t0093o5chbj9","_id":"cko3q9ijs00068u09coigb57z"},{"post_id":"cko3q9ikr00098u09arlf4u8v","tag_id":"cko2jm0ek0005t0093o5chbj9","_id":"cko3q9ikr000a8u09hwkma95k"},{"post_id":"cko3qk6ly0000gu098eqz67a1","tag_id":"cko2jm0ek0005t0093o5chbj9","_id":"cko3qk6mg0001gu09cgna0dsi"}],"Tag":[{"name":"Python","_id":"cko2jm0ek0005t0093o5chbj9"}]}}